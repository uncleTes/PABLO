// ================================================================================== //
//                                 MATH OPERATORS                                     //
//                                                                                    //
// Basic math operators for vectors.                                                  //
// ================================================================================== //
// INFO                                                                               //
// ================================================================================== //
// Author     : Alessandro Alaia                                                      //
// Version    : v3.0                                                                  //
//                                                                                    //
// All rights reserved.                                                               //
// ================================================================================== //

// ================================================================================== //
// TEMPLATE IMPLEMENTATIONS                                                           //
// ================================================================================== //

// Operator "min" =================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T>
vector< T > min(
    const vector< T >    &x,
    const vector< T >    &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< T >& min(                                                                  //
//     const vector< T >    &x,                                                       //
//     T                     m)                                                       //
//                                                                                    //
// Returns the mininum between two arrays, i.e. given x, y 1D vectors                 //
//       z = min(x, y) <-> z[i] = min(x[i], y[i])                                     //
// Note that this function can be used with multidimensional vectors.                 //
// ================================================================================== //
//                                                                                    //
// ================================================================================== //
// - x      : vector< T >, 1st argument to compare                                    //
// - y      : vector< T >, 2nd argument to compare                                    //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z      : vector< T >, comparison output                                          //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
int            n = min(x.size(), y.size());
int            m = max(x.size(), y.size());
vector< T >    z(m);

// ================================================================================== //
// COMPARE VECTORS                                                                    //
// ================================================================================== //
for (int i = 0; i < n; i++) {
    z[i] = min(x[i], y[i]);
} //next i

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< T > min(
    const vector< T >    &x,
    const T              &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector<T>& min(                                                                    //
//     const vector< T >    &x,                                                       //
//     const T              &y)                                                       //
//                                                                                    //
// Return the min value between a vector and a scalar, i.e.                           //
//      z = min(x, y) <-> z[i] = min(x[i], y)                                         //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : vector< T >, 1st argument of comparison                               //
// - y        : T, 2nd argument of comparison                                         //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z        : vector< T >, with comparison output                                   //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
int            n = x.size();
vector< T >    z(n);

// ================================================================================== //
// COMPARE VECTOR AND SCALAR                                                          //
// ================================================================================== //
for (int i = 0; i < n; i++) {
    z[i] = min(x[i], y);
} //next i

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< T > min(
    const T              &x,
    const vector< T >    &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector<T>& min(                                                                    //
//     const T              &x,                                                       //
//     const vector< T >    &y)                                                       //
//                                                                                    //
// Return the min value between a vector and a scalar, i.e.                           //
//      z = min(x, y) <-> z[i] = min(x, y[i])                                         //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : T, 2nd argument of comparison                                         //
// - y        : vector< T >, 1st argument of comparison                               //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z        : vector< T >, with comparison output                                   //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
vector< T >    z;

// ================================================================================== //
// COMPARE VECTOR AND SCALAR                                                          //
// ================================================================================== //
z = min(y, x);

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< vector< T > > min(
    const vector< vector < T > >    &x,
    const T                         &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< vector< T > > min(                                                         //
//     const vector< vector < T > >    &x,                                            //
//     const T              &y)                                                       //
//                                                                                    //
// Return the min value between a 2Dvector and a scalar, i.e.                         //
//      z = min(x, y) <-> z[i][j] = min(x[i][j], y)                                   //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : vector< vector< T > >, 1st argument of comparison                     //
// - y        : T, 2nd argument of comparison                                         //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z        : vector< vector < T > >, with comparison output                        //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
int                      n = x.size();
vector< vector< T > >    z(n);

// ================================================================================== //
// COMPARE VECTOR AND SCALAR                                                          //
// ================================================================================== //
for (int i = 0; i < n; i++) {
    z[i] = min(x[i], y);
} //next i

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< vector < T > > min(
    const T                         &x,
    const vector< vector< T > >     &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< vector < T > > min(                                                        //
//     const T                         &x,                                            //
//     const vector< vector< T > >     &y)                                            //
//                                                                                    //
// Return the min value between a 2Dvector and a scalar, i.e.                         //
//      z = min(x, y) <-> z[i][j] = min(x, y[i][j])                                   //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : T, 1st argument of comparison                                         //
// - y        : vector< vector< T > >, 2nd argument of comparison                     //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z        : vector< vector< T > >, with comparison output                         //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
vector< vector< T > >    z;

// ================================================================================== //
// COMPARE VECTOR AND SCALAR                                                          //
// ================================================================================== //
z = min(y, x);

return(z); };

// Operator "minval" ================================================================ //

// ---------------------------------------------------------------------------------- //
void inline minval(
    const double         &x,
    double               &min_value
) {

// ================================================================================== //
// void minval(                                                                       //
//     double       &x,                                                               //
//     double       &min_value)                                                       //
//                                                                                    //
// Dummy function for minval search.                                                  //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x         : double, dummy input                                                  //
// - min_value : double, dummy output                                                 //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - none                                                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
// none

// Counters
// none

// ================================================================================== //
// COMPUTE THE MIN VALUE                                                              //
// ================================================================================== //
min_value = x;

return; };

// ---------------------------------------------------------------------------------- //
void inline minval(
    const int            &x,
    int                  &min_value
) {

// ================================================================================== //
// void minval(                                                                       //
//     double &x,                                                                     //
//     int    &min_value)                                                             //
//                                                                                    //
// Dummy function for minval search.                                                  //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x         : int, dummy input                                                     //
// - min_value : int, dummy output                                                    //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - none                                                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
// none

// Counters
// none

// ================================================================================== //
// COMPUTE THE MIN VALUE                                                              //
// ================================================================================== //
min_value = x;

return; };

// ---------------------------------------------------------------------------------- //
template <class T, class T1>
void minval(
    const vector<T>      &x,
    T1                   &min_value
) {

// ================================================================================== //
// void minval(                                                                       //
//     const vector<T>    &x,                                                         //
//     T1                 &min_value)                                                 //
//                                                                                    //
// Find the minimum element in a vector                                               //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x             : vector<T>, input vector                                          //
// - min_value     : T1, minimum value of vector                                      //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - none                                                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
T1               value;

// Counters
int              i, n;

// ================================================================================== //
// FIND THE MIN-VALUE                                                                 //
// ================================================================================== //
n = x.size();
if (n > 0) {
    minval(x[0], min_value);
    for (i = 1; i < n; i++) {
        minval(x[i], value);
        if (value < min_value) {
            min_value = value;
        }
    } //next i
}

return; };

// Operator "max" =================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T>
vector<T> max(
    const vector< T >    &x,
    const vector< T >    &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector<T> max(                                                                     //
//     const vector< T >    &x,                                                       //
//     T                     m)                                                       //
//                                                                                    //
// Returns the maximum between two arrays, i.e. given x, y 1D vectors                 //
//       z = max(x, y) <-> z[i] = max(x[i], y[i])                                     //
// Note that this function can be used with multidimensional vectors.                 //
// ================================================================================== //
//                                                                                    //
// ================================================================================== //
// - x      : vector< T >, 1st argument to compare                                    //
// - y      : vector< T >, 2nd argument to compare                                    //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z      : vector< T >, comparison output                                          //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
int            n = min(x.size(), y.size());
int            m = max(x.size(), y.size());
vector< T >    z(m);

// ================================================================================== //
// COMPARE VECTORS                                                                    //
// ================================================================================== //
for (int i = 0; i < n; i++) {
    z[i] = max(x[i], y[i]);
} //next i

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< T > max(
    const vector< T >    &x,
    const T              &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector<T> max(                                                                     //
//     const vector< T >    &x,                                                       //
//     const T              &y)                                                       //
//                                                                                    //
// Return the max value between a vector and a scalar, i.e.                           //
//      z = min(x, y) <-> z[i] = max(x[i], y)                                         //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : vector< T >, 1st argument of comparison                               //
// - y        : T, 2nd argument of comparison                                         //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z        : vector< T >, with comparison output                                   //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
int            n = x.size();
vector<T>      z(n);

// ================================================================================== //
// COMPARE VECTOR AND SCALAR                                                          //
// ================================================================================== //
for (int i = 0; i < n; i++) {
    z[i] = max(x[i], y);
} //next i

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< T > max(
    const T              &x,
    const vector< T >    &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector<T> max(                                                                     //
//     const T              &x,                                                       //
//     const vector< T >    &y)                                                       //
//                                                                                    //
// Return the max value between a vector and a scalar, i.e.                           //
//      z = min(x, y) <-> z[i] = max(x, y[i])                                         //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : T, 1st argument of comparison                                         //
// - y        : vector< T >, 2nd argument of comparison                               //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z        : vector< T >, with comparison output                                   //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
vector< T >       z;

// ================================================================================== //
// COMPARE VECTOR AND SCALAR                                                          //
// ================================================================================== //
z = max(y, x);

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< vector< T > > max(
    const vector< vector< T > >    &x,
    const T                        &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector<vector<T>> max(                                                             //
//     const vector< vector< T > >    &x,                                             //
//     const T              &y)                                                       //
//                                                                                    //
// Return the max value between a 2D vector and a scalar, i.e.                        //
//      z = min(x, y) <-> z[i][j] = max(x[i][j], y)                                   //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : vector< vector< T > >, 1st argument of comparison                     //
// - y        : T, 2nd argument of comparison                                         //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z        : vector< vector< T > >, with comparison output                         //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
int                        n = x.size();
vector< vector< T > >      z(n);

// ================================================================================== //
// COMPARE VECTOR AND SCALAR                                                          //
// ================================================================================== //
for (int i = 0; i < n; i++) {
    z[i] = max(x[i], y);
} //next i

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< vector< T > > max(
    const T                        &x,
    const vector< vector< T > >    &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< vector< T > > max(                                                         //
//     const T                      &x,                                               //
//     const vector< vector< T >    &y)                                               //
//                                                                                    //
// Return the max value between a vector and a 2D scalar, i.e.                        //
//      z = min(x, y) <-> z[i][j] = max(x, y[i][j])                                   //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : T, 1st argument of comparison                                         //
// - y        : vector< vector< T > >, 2nd argument of comparison                     //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z        : vector< vector< T > >, with comparison output                         //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
vector< vector< T > >       z;

// ================================================================================== //
// COMPARE VECTOR AND SCALAR                                                          //
// ================================================================================== //
z = max(y, x);

return(z); };

// Operator "maxval" ================================================================ //

// ---------------------------------------------------------------------------------- //
void inline maxval(
    const double         &x,
    double               &max_value
) {

// ================================================================================== //
// void maxval(                                                                       //
//     double       &x,                                                               //
//     double       &max_value)                                                       //
//                                                                                    //
// Dummy function for maxval search.                                                  //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x         : double, dummy input                                                  //
// - max_value : double, dummy output                                                 //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - none                                                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
// none

// Counters
// none

// ================================================================================== //
// COMPUTE THE MIN VALUE                                                              //
// ================================================================================== //
max_value = x;

return; };

// ---------------------------------------------------------------------------------- //
void inline maxval(
    const int            &x,
    int                  &max_value
) {

// ================================================================================== //
// void maxval(                                                                       //
//     double &x,                                                                     //
//     int    &max_value)                                                             //
//                                                                                    //
// Dummy function for maxval search.                                                  //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x         : int, dummy input                                                     //
// - max_value : int, dummy output                                                    //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - none                                                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
// none

// Counters
// none

// ================================================================================== //
// COMPUTE THE MIN VALUE                                                              //
// ================================================================================== //
max_value = x;

return; };

// ---------------------------------------------------------------------------------- //
template <class T, class T1>
void maxval(
    const vector<T>      &x,
    T1                   &max_value
) {

// ================================================================================== //
// void maxval(                                                                       //
//     const vector<T>    &x,                                                         //
//     T1                 &max_value)                                                 //
//                                                                                    //
// Find the maximum element in a vector                                               //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x             : vector<T>, input vector                                          //
// - max_value     : T1, maximum value of vector                                      //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - none                                                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
T1               value;

// Counters
int              i, n;

// ================================================================================== //
// FIND THE MIN-VALUE                                                                 //
// ================================================================================== //
n = x.size();
if (n > 0) {
    maxval(x[0], max_value);
    for (i = 1; i < n; i++) {
        maxval(x[i], value);
        if (value > max_value) {
            max_value = value;
        }
    } //next i
}

return; };

// Operator "sum" =================================================================== //

// ---------------------------------------------------------------------------------- //
void inline sum(
    const int            &x,
    int                  &s
) {

// ================================================================================== //
// void inline sum(                                                                   //
//     const int          &x,                                                         //
//     int                &s)                                                         //
//                                                                                    //
// Dummy routine for sum operator.                                                    //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x         : int, dummy input                                                     //
// - s         : int, dummy output                                                    //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - none                                                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
// none

// Counters
// none

// ================================================================================== //
// PERFORM DUMMY SUM                                                                  //
// ================================================================================== //
s = x;

return; };

// ---------------------------------------------------------------------------------- //
void inline sum(
    const double         &x,
    double               &s
) {

// ================================================================================== //
// void inline sum(                                                                   //
//     const double       &x,                                                         //
//     double             &s)                                                         //
//                                                                                    //
// Dummy routine for sum operator.                                                    //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x         : int, dummy input                                                     //
// -s         : int, dummy output                                                     //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - none                                                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
// none

// Counters
// none

// ================================================================================== //
// PERFORM DUMMY SUM                                                                  //
// ================================================================================== //
s = x;

return; };

// ---------------------------------------------------------------------------------- //
template <class T, class T1>
void sum(
    const vector< T >    &x,
    T1                   &s
) {

// ================================================================================== //
// template <class T, class T1>                                                       //
// void inline sum(                                                                   //
//     const vector< T >  &x,                                                         //
//     T1                 &s)                                                         //
//                                                                                    //
// Summation of vector elements.                                                      //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : vector< T >, input vector                                             //
// - s        : T1, sum of element's vector                                           //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - none                                                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
int           n = x.size();
T1            value;

// Counters
int           i;

// ================================================================================== //
// PERFORM SUMMATION                                                                  //
// ================================================================================== //
if (n > 0) {
    sum(x[0], s);
    for (i = 1; i < n; i++) {
        sum(x[i], value);
        s += value;
    } //next i
}

return; };

// Operator "abs" =================================================================== //
template <class T>
vector<T> abs(
    const vector< T >    &x
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector<T> abs(                                                                     //
//     const vector< T >  &x)                                                         //
//                                                                                    //
// Returns the absolute value of a vector z[i] := abs(x[i])                           //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x            : vector< T >, input vector                                         //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z            : vector< T >, absolute value of a input vector                     //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
int                     n = x.size();
vector< T >             z;

// Counters
int                     i;

// ================================================================================== //
// COMPUTE THE ABSOLUTE VALUE OF A VECTOR                                             //
// ================================================================================== //
if (n > 0) {
    z.resize(n);
    for (i = 0; i < n; i++) {
        z[i] = abs(x[i]);
    } //next i
}

return(z); };

// Operator "pow" =================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T>
vector< T > pow(
    vector< T >          &x,
    double                p
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector<T> pow(                                                                     //
//    vector< T >        &x,                                                          //
//    double              p)                                                          //
//                                                                                    //
// Element-wise power of vector. Returns z[i] = pow(x[i], n)                          //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x       : vector< T >, input vector                                              //
// - p       : double, exponent                                                       //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - y       : vector< T >, output vector                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
int              n;
vector< T >      y;

// Counters
int              i;

// ================================================================================== //
// COMPUTE ELEMENT-WISE POWER                                                         //
// ================================================================================== //
n = x.size();
y.resize(n);
for (i = 0; i < n; i++) {
    y[i] = pow(x[i], p);
} //next i

return(y); };

// Operator "norm" ================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T>
double norm_1(
    const vector< T >    &x
) {

// ================================================================================== //
// template <class T, class T1>                                                       //
// double norm_1(                                                                     //
//     const vector< T >  &x)                                                         //
//                                                                                    //
// Compute the 1-norm of a input vector.                                              //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x           : vector< T >, input vector                                          //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - n           : double, norm of vector                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
int             n = x.size();
double          z = 0.0;

// Counters
int             i, j;

// ================================================================================== //
// COMPUTE THE P-NORM                                                                 //
// ================================================================================== //
if (n > 0) {
    for (i = 0; i < n; i++) {
        z += abs(x[i]);
    } //next i
}

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
double norm_2(
    const vector< T >    &x
) {

// ================================================================================== //
// template <class T, class T1>                                                       //
// double norm_2(                                                                     //
//     const vector< T >  &x)                                                         //
//                                                                                    //
// Compute the 2-norm of a input vector.                                              //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x           : vector< T >, input vector                                          //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - n           : double, norm of vector                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
int             n = x.size();
double          z = 0.0;

// Counters
int             i, j;

// ================================================================================== //
// COMPUTE THE P-NORM                                                                 //
// ================================================================================== //
if (n > 0) {
    for (i = 0; i < n; i++) {
        z += x[i]*x[i];
    } //next i
}

return(sqrt(z)); };

// ---------------------------------------------------------------------------------- //
template <class T>
double norm(
    const vector< T >    &x,
    int                   p
) {

// ================================================================================== //
// template <class T, class T1>                                                       //
// double norm(                                                                       //
//     const vector< T >  &x,                                                         //
//     int                 p)                                                         //
//                                                                                    //
// Compute the p-norm of a input vector.                                              //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x           : vector< T >, input vector                                          //
// - p           : int, norm index                                                    //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - n           : double, norm of vector                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
int             n = x.size();
double          z = 0.0;
double          t, y;

// Counters
int             i, j;

// ================================================================================== //
// COMPUTE THE P-NORM                                                                 //
// ================================================================================== //
if (p == 1) { return(norm_1(x)); }
if (p == 2) { return(norm_2(x)); }

if (n > 0) {
    for (i = 0; i < n; i++) {
        y = 1.0;
        t = x[i];
        for (j = 1; j <= p; j++) {
            y = y*t;
        } //next j
        z += abs(y);
    } //next i
}

return(exp(log(max(z, 1.0e-307))/((double) p))); };

// ---------------------------------------------------------------------------------- //
template <class T>
double norm_inf(
    const vector< T >    &x
) {

// ================================================================================== //
// template <class T, class T1>                                                       //
// double norm_inf(                                                                   //
//     const vector< T >  &x)                                                         //
//                                                                                    //
// Compute the inf-norm of a input vector.                                            //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x           : vector< T >, input vector                                          //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - n           : double, inf-norm of vector                                         //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
int             n = x.size();
double          z = 0.0, y;

// Counters
int             i;

// ================================================================================== //
// COMPUTE THE inf-NORM                                                               //
// ================================================================================== //
if (n > 0) {
    z = abs(x[0]);
    for (i = 1; i < n; i++) {
        y = abs(x[i]);
        if (y > z) {
            z = y;
        }
    } //next i
}

return(z); };

// Operator "Dot_Product" =========================================================== //

// ---------------------------------------------------------------------------------- //
template <class T>
T Dot_Product(
    const vector< T >    &x,
    const vector< T >    &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// T Dot_Product(                                                                     //
//     const vector< T >  &x,                                                         //
//     const vector< T >  &y)                                                         //
//                                                                                    //
// Compute the dot product of two vectors.                                            //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : vector< T >, 1st argument of dot product                              //
// - y        : vector< T >, 2nd argument of dot product                              //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - dp       : T, dot product of input vectors                                       //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
int                 n = x.size(), m = y.size();
T                   dp = ((T) 0.0);

// Counters
int                 i;

// ================================================================================== //
// COMPUTE THE DOT PRODUCT                                                            //
// ================================================================================== //
if ((n > 0) && (n == m)) {
    for (i = 0; i < n; i++) {
        dp += x[i]*y[i];
    } //next i
}

return(dp); };

// Operator "Cross_Product" ========================================================= //

// ---------------------------------------------------------------------------------- //
template <class T>
vector<T> Cross_Product(
    const vector<T>      &x,
    const vector<T>      &y
) {

// =================================================================================== //
// template <class T>                                                                  //
// vector<T> Cross_Product(                                                            //
//     const vector<T>      &x,                                                        //
//     const vector<T>      &y)                                                        //
//                                                                                     //
// Compute the cross product between x, and y.                                         //
// =================================================================================== //
// INPUT                                                                               //
// =================================================================================== //
// - x,     : vector<T>, 1st argument of the external product                          //
// - y,     : vector<T>, 2nd argument of the external product                          //
// =================================================================================== //
// INPUT                                                                               //
// =================================================================================== //
// - z      : vector<T>, external product between x and y                              //
// =================================================================================== //

// =================================================================================== //
// VARIABLES DECLARATION                                                               //
// =================================================================================== //
vector<T>      z(3,0.0);

// =================================================================================== //
// COMPUTE THE EXTERNAL PRODUCT                                                        //
// =================================================================================== //
z[0] = x[1] * y[2] - x[2] * y[1];
z[1] = x[2] * y[0] - x[0] * y[2];
z[2] = x[0] * y[1] - x[1] * y[0];

return (z);}
