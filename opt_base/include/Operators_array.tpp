// ===================================================================================//
//                                  OPERATORS                                         //
//                                                                                    //
// Operators for standard template library arrays.                                    //
// ================================================================================== //
// INFO                                                                               //
// ================================================================================== //
// Author     : Alessandro Alaia                                                      //
// Version    : v3.0                                                                  //
//                                                                                    //
// All rights reserved.                                                               //
// ================================================================================== //

// ================================================================================== //
// TEMPLATES IMPLEMENTATION                                                           //
// ================================================================================== //

// Operator "+" ===================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
array<T, d> operator+ (
  const array<T, d> &x,
  const array<T, d> &y
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> operator+ (                                                            //
//   const array<T, d> &x,                                                            //
//   const array<T, d> &y)                                                            //
//                                                                                    //
// Element-wise sum of C++ v10.0 arrays. Returns:                                     //
//        z = x + y, s.t. z[i] = x[i] + y[i]                                          //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : array<T, d>, 1st argument of '+' operator                                  //
// - y   : array<T, d>, 2nd argument of '+' operator                                  //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : array<T, d>, sum of x, y                                                   //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<T, d>          z;

// ================================================================================== //
// PERFORM SUM                                                                        //
// ================================================================================== //
for (int i = 0; i < d; i++){
    z[i] = x[i] + y[i];
};

return (z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
array<T, d> operator+ (
  const array<T, d> &x,
  const T           &y
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> operator+ (                                                            //
//   const array<T, d> &x,                                                            //
//   const T           &y)                                                            //
//                                                                                    //
// Element-wise sum between C++ v10.0 array and constant. Returns:                    //
//        z = x + y, s.t. z[i] = x[i] + y                                             //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : array<T, d>, 1st argument of '+' operator                                  //
// - y   : T, 2nd argument of '+' operator                                            //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : array<T, d>, sum of x, y                                                   //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<T, d>          z;

// ================================================================================== //
// PERFORM SUM                                                                        //
// ================================================================================== //
for (int i = 0; i < d; i++){
    z[i] = x[i] + y;
};

return (z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
array<T, d> operator+ (
  const T           &x,
  const array<T, d> &y
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> operator+ (                                                            //
//   const T           &x,                                                            //
//   const array<T, d> &y)                                                            //
//                                                                                    //
// Element-wise sum between constant and C++ v10.0 array. Retunrs:                    //
//        z = x + y, s.t. z[i] = x + y[i]                                             //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - y   : T, 1st argument of '+' operator                                            //
// - x   : array<T, d>, 2nd argument of '+' operator                                  //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : array<T, d>, sum of x, y                                                   //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<T, d>   z;

// ================================================================================== //
// PERFORM SUM                                                                        //
// ================================================================================== //
z = y + x;

return (z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d, size_t e>
array<array<T, e>, d> operator+ (
  const T                       &x,
  const array<array<T, e>, d>   &y
) {

// ================================================================================== //
// template <class T, size_t d, size_t e>                                             //
// array<array<T, e>, d> operator+ (                                                  //
//   const T                       &x,                                                //
//   const array<array<T, e>, d>   &y)                                                //
//                                                                                    //
// Element-wise sum between constant and C++ v10.0 array. Retunrs:                    //
//        z = x + y, s.t. z[i][j] = x + y[i][j]                                       //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : T, 1st argument of '+' operator                                            //
// - y   : array<array<T, e>, d>, 1st argument of '+' operator                        //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : array<T, d>, sum of x, y                                                   //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<array<T, e>, d>   z;

// ================================================================================== //
// PERFORM SUM                                                                        //
// ================================================================================== //
for (int i = 0; i < d; i++){
    z[i] = x + y[i];
};

return (z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d, size_t e>
array<array<T, e>, d> operator+ (
  const array<array<T, e>, d>   &x,
  const T                       &y
) {

// ================================================================================== //
// template <class T, size_t d, size_t e>                                             //
// array<array<T, e>, d> operator+ (                                                  //
//   const T                       &x,                                                //
//   const array<array<T, e>, d>   &y)                                                //
//                                                                                    //
// Element-wise sum between constant and C++ v10.0 array. Retunrs:                    //
//        z = x + y, s.t. z[i][j] = x[i][j] + y                                       //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : array<array<T, e>, d>, 1st argument of '+' operator                        //
// - y   : T, 2nd argument of '+' operator                                            //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : array<array<T, e>, d>, sum of x, y                                         //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<array<T, e>, d>   z;

// ================================================================================== //
// PERFORM SUM                                                                        //
// ================================================================================== //
z = y + x;

return (z); };

// Operator "-" ===================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
array<T, d> operator- (
  const array<T, d> &x,
  const array<T, d> &y
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> operator- (                                                            //
//   const array<T, d> &x,                                                            //
//   const array<T, d> &y)                                                            //
//                                                                                    //
// Element-wise difference between C++ v10.0 arrays. Returns:                         //
//     z = x - y, s.t. z[i] = x[i] - y[i]                                             //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : array<T, d>, 1st argument of '-' operator                                  //
// - y   : array<T, d>, 2nd argument of '-' operator                                  //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : array<T, d>, difference of x, y                                            //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<T, d>          z;

// ================================================================================== //
// PERFORM DIFFERENCE                                                                 //
// ================================================================================== //
for (int i = 0; i < d; i++){
    z[i] = x[i] - y[i];
};

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
array<T, d> operator- (
  const array<T, d> &x,
  const T           &y
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> operator- (                                                            //
//   const array<T, d> &x,                                                            //
//   const T           &y)                                                            //
//                                                                                    //
// Element-wise difference between C++ v10.0 array and constant. Returns:             //
//     z = x - y, s.t. z[i] = x[i] - y                                                //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : array<T, d>, 1st argument of '-' operator                                  //
// - y   : T, 2nd argument of '-' operator                                            //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : vector<T>, difference of x, y                                              //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<T, d>          z;

// ================================================================================== //
// PERFORM DIFFERENCE                                                                 //
// ================================================================================== //
for (int i = 0; i < d; i++){
    z[i] = x[i] - y;
};

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
array<T, d> operator- (
  const T           &x,
  const array<T, d> &y
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> operator- (                                                            //
//   const T           &x,                                                            //
//   const array<T, d> &y)                                                            //
//                                                                                    //
// Element-wise difference between constant and C++ v10.0 array. Returns:             //
//     z = x - y, s.t. z[i] = x - y[i]                                                //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : T, 1st argument of '-' operator                                            //
// - y   : array<T, d>, 2nd argument of '-' operator                                  //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : array<T, d>, difference of x, y                                            //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<T, d>   z;

// ================================================================================== //
// PERFORM DIFFERENCE                                                                 //
// ================================================================================== //
z = y - x;

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d, size_t e>
array<array<T, e>, d> operator- (
  const T                       &x,
  const array<array<T, e>, d>   &y
) {

// ================================================================================== //
// template <class T, size_t d, size_t e>                                             //
// array<array<T, e>, d> operator- (                                                  //
//   const T                       &x,                                                //
//   const array<array<T, e>, d>   &y)                                                //
//                                                                                    //
// Element-wise difference between constant and C++ v10.0 array. Returns:             //
//     z = x - y, s.t. z[i][j] = x - y[i][j]                                          //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : T, 1st argument of '-' operator                                            //
// - y   : array<array<T, e>, d>, 2nd argument of '-' operator                        //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : array<array<T, e>, d>, difference of x, y                                  //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<array<T, e>, d>   z;

// ================================================================================== //
// PERFORM DIFFERENCE                                                                 //
// ================================================================================== //
for (int i = 0; i < d; i++) {
    z[i] = y[i] - x;
} //next i

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d, size_t e>
array<array<T, e>, d> operator- (
  const array<array<T, e>, d>   &x,
  const T                       &y
) {

// ================================================================================== //
// template <class T, size_t d, size_t e>                                             //
// array<array<T, e>, d> operator- (                                                  //
//   const array<array<T, e>, d>   &x,                                                //
//   const T                       &y)                                                //
//                                                                                    //
// Element-wise difference between constant and C++ v10.0 array. Returns:             //
//     z = x - y, s.t. z[i][j] = x[i][j] - y                                          //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : array<array<T, e>, d>, 1st argument of '-' operator                        //
// - y   : T, 2nd argument of '-' operator                                            //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : array<array<T, e>, d>, difference of x, y                                  //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<array<T, e>, d>   z;

// ================================================================================== //
// PERFORM DIFFERENCE                                                                 //
// ================================================================================== //
z = y - x;

return(z); };

// Operator "*" ===================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
array<T, d> operator* (
  const array<T, d> &x,
  const array<T, d> &y
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> operator* (                                                            //
//   const array<T, d> &x,                                                            //
//   const array<T, d> &y)                                                            //
//                                                                                    //
// Element-wise product between C++ v10.0 arrays. Returns:                            //
//      z = x * y, s.t. z[i] = x[i]*y[i]                                              //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : array<T, d>, 1st argument of '*' operator                                  //
// - y   : array<T, d>, 2nd argument of '*' operator                                  //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : array<T, d>, elementwise product between x, y                              //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<T, d>          z;

// ================================================================================== //
// PERFORM PRODUCT                                                                    //
// ================================================================================== //
for (int i = 0; i < d; i++){
    z[i] = x[i] * y[i];
};

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
array<T, d> operator* (
  const array<T, d> &x,
  const T           &y
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> operator* (                                                            //
//   const array<T, d> &x,                                                            //
//   const T           &y)                                                            //
//                                                                                    //
// Element-wise product between C++ v10.0 array and constant. Returns:                //
//      z = x * y, s.t. z[i] = x[i]*y                                                 //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : array<T, d>, 1st argument of '*' operator                                  //
// - y   : T, 2nd argument of '*' operator                                            //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : array<T, d>, elementwise product between x, y                              //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<T, d>          z;

// ================================================================================== //
// PERFORM PRODUCT                                                                    //
// ================================================================================== //
for (int i = 0; i < d; i++){
    z[i] = x[i] * y;
};

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
array<T, d> operator* (
  const T           &x,
  const array<T, d> &y
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> operator* (                                                            //
//   const T           &x,                                                            //
//   const array<T, d> &y)                                                            //
//                                                                                    //
// Element-wise product between constant and C++ v10.0 array. Returns:                //
//      z = x * y, s.t. z[i] = x*y[i]                                                 //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : T, 1st argument of '*' operator                                            //
// - y   : array<T, d>, 2nd argument of '*' operator                                  //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : array<T, d>, elementwise product between x, y                              //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<T, d>   z;

// ================================================================================== //
// PERFORM PRODUCT                                                                    //
// ================================================================================== //
z = y * x;

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d, size_t e>
array<array<T, e>, d> operator* (
  const T                       &x,
  const array<array<T, e>, d>   &y
) {

// ================================================================================== //
// template <class T, size_t d, size_t e>                                             //
// array<array<T, e>, d> operator* (                                                  //
//   const T                       &x,                                                //
//   const array<array<T, e>, d>   &y)                                                //
//                                                                                    //
// Element-wise product between constant and C++ v10.0 array. Returns:                //
//      z = x * y, s.t. z[i][j] = x*y[i][j]                                           //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : T, 1st argument of '*' operator                                            //
// - y   : array<array<T, e>, d>, 2nd argument of '*' operator                        //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : array<array<T, e>, d>, elementwise product between x, y                    //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<array<T, e>, d>   z;

// ================================================================================== //
// PERFORM PRODUCT                                                                    //
// ================================================================================== //
for (int i = 0; i < d; i++) {
    z[i] = y[i] * x;
} //next i

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d, size_t e>
array<array<T, e>, d> operator* (
  const array<array<T, e>, d>   &x,
  const T                       &y
) {

// ================================================================================== //
// template <class T, size_t d, size_t e>                                             //
// array<array<T, e>, d> operator* (                                                  //
//   const array<array<T, e>, d>   &x,                                                //
//   const T                       &y)                                                //
//                                                                                    //
// Element-wise product between constant and C++ v10.0 array. Returns:                //
//      z = x * y, s.t. z[i][j] = x[i][j]*y                                           //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : array<array<T, e>, d>, 1st argument of '*' operator                        //
// - y   : T, 2nd argument of '*' operator                                            //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : array<array<T, e>, d>, elementwise product between x, y                    //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<array<T, e>, d>   z;

// ================================================================================== //
// PERFORM PRODUCT                                                                    //
// ================================================================================== //
for (int i = 0; i < d; i++) {
    z[i] = x[i] * y;
} //next i

return(z); };

// Operator "/" ===================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
array<T, d> operator/ (
  const array<T, d> &x,
  const array<T, d> &y
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> operator/ (                                                            //
//   const array<T, d> &x,                                                            //
//   const array<T, d> &y)                                                            //
//                                                                                    //
// Element-wise division between C++ v10.0 arrays. Retuns:                            //
//    z = x / y, s.t. z[i] = x[i]/y[i].                                               //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : array<T, d>, 1st argument of '/' operator                                  //
// - y   : array<T, d>, 2nd argument of '/' operator                                  //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : array<T, d>, elementwise division between x, y                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<T, d>          z;

// ================================================================================== //
// PERFORM DIVISION                                                                   //
// ================================================================================== //
for (int i = 0; i < d; i++){
    z[i] = x[i] / y[i];
};

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
array<T, d> operator/ (
  const array<T, d> &x,
  const T           &y
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> operator/ (                                                            //
//   const array<T, d> &x,                                                            //
//   const T           &y)                                                            //
//                                                                                    //
// Element-wise division between C++ v10.0 array and constant. Retuns:                //
//    z = x / y, s.t. z[i] = x[i]/y.                                                  //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x    : array<T, d>, 1st argument of "/" operator                                 //
// - y    : T, 2nd argument of "/" operator                                           //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z    : array<T, d>>, result of element-wise division                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
array<T, d>    z;

// Counters
int            i;

// ================================================================================== //
// DIVIDE X BY Y                                                                      //
// ================================================================================== //
for (i = 0; i < d; i++) {
    z[i] = x[i]/y;
}

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
array<T, d> operator/ (
  const T           &x,
  const array<T, d> &y
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> operator/ (                                                            //
//   const T           &x,                                                            //
//   const array<T, d> &y)                                                            //
//                                                                                    //
// Element-wise division between constant and C++ v10.0 array. Retuns:                //
//    z = x / y, s.t. z[i] = x/y[i].                                                  //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x    : T, 1st argument of "/" operator                                           //
// - y    : array<T, d>, 2nd argument of "/" operator                                 //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z    : array<T, d>, result of element-wise division                              //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<T, d>      z;

// ================================================================================== //
// DIVIDE X BY Y                                                                      //
// ================================================================================== //
for (int i = 0; i < d; i++) {
    z[i] = x/y[i];
}

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d, size_t e>
array<array<T, e>, d> operator/ (
  const T                       &x,
  const array<array<T, e>, d>   &y
) {

// ================================================================================== //
// template <class T, size_t d, size_t e>                                             //
// array<array<T, e>, d> operator/ (                                                  //
//   const T                       &x,                                                //
//   const array<array<T, e>, d>   &y)                                                //
//                                                                                    //
// Element-wise division between constant and C++ v10.0 array. Retuns:                //
//    z = x / y, s.t. z[i][j] = x/y[i][j].                                            //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x    : T, 1st argument of "/" operator                                           //
// - y    : array<array<T, e>, d>, 2nd argument of "/" operator                       //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z    : array<array<T, e>, d>, result of element-wise division                    //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<array<T, e>, d>      z;

// ================================================================================== //
// DIVIDE X BY Y                                                                      //
// ================================================================================== //
for (int i = 0; i < d; i++) {
    z[i] = x/y[i];
}

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d, size_t e>
array<array<T, e>, d> operator/ (
  const array<array<T, e>, d>   &x,
  const T                       &y
) {

// ================================================================================== //
// template <class T, size_t d, size_t e>                                             //
// array<array<T, e>, d> operator/ (                                                  //
//   const array<array<T, e>, d>   &x,                                                //
//   const T                       &y)                                                //
//                                                                                    //
// Element-wise division between constant and C++ v10.0 array. Retuns:                //
//    z = x / y, s.t. z[i][j] = x[i][j]/y.                                            //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x    : T, 1st argument of "/" operator                                           //
// - y    : array<array<T, e>, d>, 2nd argument of "/" operator                       //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z    : array<array<T, e>, d>, result of element-wise division                    //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<array<T, e>, d>      z;

// ================================================================================== //
// DIVIDE X BY Y                                                                      //
// ================================================================================== //
for (int i = 0; i < d; i++) {
    z[i] = x[i]/y;
}

return(z); };

// Output operator ================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
ostream& operator<< (
    ostream              &out,
    const array<T, d>    &x
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// ostream& operator<< (                                                              //
//     ostream              &out,                                                     //
//     const array<T, d>    &x)                                                       //
//                                                                                    //
// Output stream for vector.                                                          //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - out       : ostream, with output stream                                          //
// - x         : array<T, d>, with vector to be streamed                              //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - out       : ostream, with updated output stream                                  //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
// none

// ================================================================================== //
// OUTPUT VECTOR CONTENT                                                              //
// ================================================================================== //
if (d == 0) {
    out << "[]";
    return(out);
}
out << "[";
for (int i = 0; i < d-1; i++) {
    out << x[i] << ", ";
} //next i
out << x[d-1] << "]";

return(out); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
ofstream& operator<< (
    ofstream             &out,
    const array<T, d>    &x
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// ofstream& operator<< (                                                             //
//     ofstream              &out,                                                    //
//     const array<T, d>    &x)                                                       //
//                                                                                    //
// Output file stream for vector.                                                     //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - out       : ofstream, with output stream                                         //
// - x         : array<T, d>, with vector to be streamed                              //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - out       : ofstream, with updated output stream                                 //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
// none

// ================================================================================== //
// OUTPUT VECTOR CONTENT                                                              //
// ================================================================================== //
if (d == 0) {
    return(out);
}
for (int i = 0; i < d-1; i++) {
    out << x[i] << " ";
} //next i
out << x[d-1];

return(out); };

// Input operator =================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
istream& operator>> (
    istream              &in,
    array<T, d>          &x
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// istream& operator>> (                                                              //
//     istream              &in,                                                      //
//     array<T, d>          &x)                                                       //
//                                                                                    //
// Input stream for array.                                                            //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - in        : istream, with input stream                                           //
// - x         : array<T, d>, with array to be streamed                               //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - x         : array<T, d>, updated streamed array.                                 //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
T                    dummy;

// Counters
int                  i;

// ================================================================================== //
// EXTRACT STREAM CONTENT INTO VECTOR                                                 //
// ================================================================================== //
i = 0;
while ((in.good()) && (i < d)) {
    if (in >> dummy) { x[i] = dummy; }
    i++;
} //next i

return(in); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
ifstream& operator>> (
    ifstream             &in,
    array<T, d>          &x
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// ifstream& operator>> (                                                             //
//     ifstream             &in,                                                      //
//     array<T, d>          &x)                                                       //
//                                                                                    //
// Input file stream for array.                                                       //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - in        : ifstream, with input file stream                                     //
// - x         : array<T, d>, with array to be streamed                               //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - x         : array<T, d>, with updated streamed array                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
T       dummy;

// Counters
int     i;

// ================================================================================== //
// EXTRACT FILE CONTENT INTO VECTOR                                                   //
// ================================================================================== //
i = 0;
while ((in.good()) && (i < d)) {
    if (in >> dummy) { x[i] = dummy; }
    i++;
} //next i

return(in); };

