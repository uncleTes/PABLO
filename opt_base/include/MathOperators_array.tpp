// ================================================================================== //
//                                 MATH OPERATORS                                     //
//                                                                                    //
// Basic math operators for array.                                                    //
// ================================================================================== //
// INFO                                                                               //
// ================================================================================== //
// Author     : Alessandro Alaia                                                      //
// Version    : v3.0                                                                  //
//                                                                                    //
// All rights reserved.                                                               //
// ================================================================================== //

// ================================================================================== //
// TEMPLATE IMPLEMENTATIONS                                                           //
// ================================================================================== //

// Operator "min" =================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
array<T, d> min(
    const array<T, d>    &x,
    const array<T, d>    &y
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> min(                                                                   //
//     const array<T, d>    &x,                                                       //
//     const array<T, d>    &y)                                                       //
//                                                                                    //
// Returns the mininum between two arrays, i.e. given x, y 1D arrays                  //
//       z = min(x, y) <-> z[i] = min(x[i], y[i])                                     //
// Note that this function can be used with multidimensional vectors.                 //
// ================================================================================== //
//                                                                                    //
// ================================================================================== //
// - x      : array<T, d>, 1st argument to compare                                    //
// - y      : array<T, d>, 2nd argument to compare                                    //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z      : array<T, d>, comparison output                                          //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<T, d>          z;

// ================================================================================== //
// COMPARE VECTORS                                                                    //
// ================================================================================== //
for (int i = 0; i < d; i++) {
    z[i] = min(x[i], y[i]);
} //next i

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
array<T, d> min(
    const array<T, d>    &x,
    const T              &y
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> min(                                                                   //
//     const array<T, d>    &x,                                                       //
//     const T              &y)                                                       //
//                                                                                    //
// Return the min value between a C++ v10.0 array and a scalar, i.e.                  //
//      z = min(x, y) <-> z[i] = min(x[i], y)                                         //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : array<T, d>, 1st argument of comparison                               //
// - y        : T, 2nd argument of comparison                                         //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z        : array<T, d>, with comparison output                                   //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<T, d>    z;

// ================================================================================== //
// COMPARE VECTOR AND SCALAR                                                          //
// ================================================================================== //
for (int i = 0; i < d; i++) {
    z[i] = min(x[i], y);
} //next i

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
array<T, d> min(
    const T              &x,
    const array<T, d>    &y
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> min(                                                                   //
//     const T              &x,                                                       //
//     const array<T, d>    &y)                                                       //
//                                                                                    //
// Return the min value between a C++ v10.0 array and a scalar, i.e.                  //
//      z = min(x, y) <-> z[i] = min(x, y[i])                                         //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : T, 2nd argument of comparison                                         //
// - y        : array<T, d>, 1st argument of comparison                               //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z        : array<T, d>, with comparison output                                   //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<T, d>    z;

// ================================================================================== //
// COMPARE VECTOR AND SCALAR                                                          //
// ================================================================================== //
z = min(y, x);

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d, size_t n>
array<array<T, n>, d> min(
    const array<array<T, n>, d>    &x,
    const T                        &y
) {

// ================================================================================== //
// template <class T, size_t d, size_t n>                                             //
// array<array<T, n>, d> min(                                                         //
//     const array<array<T, n>, d>    &x,                                             //
//     const T                        &y)                                             //
//                                                                                    //
// Return the min value between a C++ v10.0 2D array and a scalar, i.e.               //
//      z = min(x, y) <-> z[i][j] = min(x[i][j], y)                                   //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : array<array<T, n>, d>, 1st argument of comparison                     //
// - y        : T, 2nd argument of comparison                                         //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z        : array<array<T, n>, d>, with comparison output                         //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<array<T, n>, d>    z;

// ================================================================================== //
// COMPARE VECTOR AND SCALAR                                                          //
// ================================================================================== //
for (int i = 0; i < d; i++) {
    z[i] = min(x[i], y);
} //next i

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d, size_t n>
array<array<T, n>, d> min(
    const T                        &x,
    const array<array<T, n>, d>    &y
) {

// ================================================================================== //
// template <class T, size_t d, size_t n>                                             //
// array<array<T, n>, d> min(                                                         //
//     const T                        &x,                                             //
//     const array<array<T, n>, d>    &y)                                             //
//                                                                                    //
// Return the min value between a C++ v10.0 2D array and a scalar, i.e.               //
//      z = min(x, y) <-> z[i][j] = min(x, y[i][j])                                   //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : T, 2nd argument of comparison                                         //
// - y        : array<array<T, n>, d>, 1st argument of comparison                     //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z        : array<array<T, n>, d>, with comparison output                         //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<array<T, n>, d>    z;

// ================================================================================== //
// COMPARE VECTOR AND SCALAR                                                          //
// ================================================================================== //
z = min(y, x);

return(z); };

// Operator "minval" ================================================================ //

// ---------------------------------------------------------------------------------- //
template <class T, size_t d, class T1>
void minval(
    const array<T, d>    &x,
    T1                   &min_value
) {

// ================================================================================== //
// template <class T, size_t d, class T1>                                             //
// void minval(                                                                       //
//     const array<T, d>  &x,                                                         //
//     T1                 &min_value)                                                 //
//                                                                                    //
// Find the minimum element in a vector                                               //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x             : array<T, d>, input vector                                        //
// - min_value     : T1, minimum value of vector                                      //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - none                                                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
T1               value;

// Counters
int              i;

// ================================================================================== //
// FIND THE MIN-VALUE                                                                 //
// ================================================================================== //
if (d > 0) {
    minval(x[0], min_value);
    for (i = 1; i < d; i++) {
        minval(x[i], value);
        if (value < min_value) {
            min_value = value;
        }
    } //next i
}

return; };

// Operator "max" =================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
array<T, d> max(
    const array<T, d>    &x,
    const array<T, d>    &y
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> max(                                                                   //
//     const array<T, d>    &x,                                                       //
//     const array<T, d>    &y)                                                       //
//                                                                                    //
// Returns the maximum between two arrays, i.e. given x, y arrays                     //
//       z = max(x, y) <-> z[i] = max(x[i], y[i])                                     //
// Note that this function can be used with multidimensional vectors.                 //
// ================================================================================== //
//                                                                                    //
// ================================================================================== //
// - x      : array<T, d>, 1st argument to compare                                    //
// - y      : array<T, d>, 2nd argument to compare                                    //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z      : array<T, d>, comparison output                                          //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<T, d>    z;

// ================================================================================== //
// COMPARE VECTORS                                                                    //
// ================================================================================== //
for (int i = 0; i < d; i++) {
    z[i] = max(x[i], y[i]);
} //next i

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
array<T, d> max(
    const array<T, d>    &x,
    const T              &y
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> max(                                                                   //
//     const array<T, d>    &x,                                                       //
//     const T              &y)                                                       //
//                                                                                    //
// Return the max value between a C++ v10.0 array and a scalar, i.e.                  //
//      z = min(x, y) <-> z[i] = max(x[i], y)                                         //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : array<T, d>, 1st argument of comparison                               //
// - y        : T, 2nd argument of comparison                                         //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z        : array<T, d>, with comparison output                                   //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<T, d>      z;

// ================================================================================== //
// COMPARE VECTOR AND SCALAR                                                          //
// ================================================================================== //
for (int i = 0; i < d; i++) {
    z[i] = max(x[i], y);
} //next i

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
array<T, d> max(
    const T              &x,
    const array<T, d>    &y
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> max(                                                                   //
//     const T              &x,                                                       //
//     const array<T, d>    &y)                                                       //
//                                                                                    //
// Return the max value between a C++ v10.0 array and a scalar, i.e.                  //
//      z = min(x, y) <-> z[i] = max(x, y[i])                                         //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : T, 1st argument of comparison                                         //
// - y        : array<T, d>, 2nd argument of comparison                               //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z        : array<T, d>, with comparison output                                   //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<T, d>       z;

// ================================================================================== //
// COMPARE VECTOR AND SCALAR                                                          //
// ================================================================================== //
z = max(y, x);

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d, size_t n>
array<array<T, n>, d> max(
    const array<array<T, n>, d>    &x,
    const T                        &y
) {

// ================================================================================== //
// template <class T, size_t d, size_t n>                                             //
// array<array<T, n>, d> max(                                                         //
//     const array<array<T, n>, d>    &x,                                             //
//     const T                        &y)                                             //
//                                                                                    //
// Return the max value between a C++ v10.0 2D array and a scalar, i.e.               //
//      z = min(x, y) <-> z[i][j] = max(x[i][j], y)                                   //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : array<array<T, n>, d>, 1st argument of comparison                     //
// - y        : T, 2nd argument of comparison                                         //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z        : array<array<T, n>, d>, with comparison output                         //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<array<T, n>, d>      z;

// ================================================================================== //
// COMPARE VECTOR AND SCALAR                                                          //
// ================================================================================== //
for (int i = 0; i < d; i++) {
    z[i] = max(x[i], y);
} //next i

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d, size_t n>
array<array<T, n>, d> max(
    const T                        &x,
    const array<array<T, n>, d>    &y
) {

// ================================================================================== //
// template <class T, size_t d, size_t n>                                             //
// array<array<T, n>, d> max(                                                         //
//     const T                        &x,                                             //
//     const array<array<T, n>, d>    &y)                                             //
//                                                                                    //
// Return the max value between a C++ v10.0 2D array and a scalar, i.e.               //
//      z = min(x, y) <-> z[i][j] = max(x, y[i][j])                                   //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : T, 1st argument of comparison                                         //
// - y        : array<array<T, n>, d>, 2nd argument of comparison                     //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z        : array<array<T, n>, d>, with comparison output                         //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
array<array<T, n>, d>       z;

// ================================================================================== //
// COMPARE VECTOR AND SCALAR                                                          //
// ================================================================================== //
z = max(y, x);

return(z); };


// Operator "maxval" ================================================================ //

// ---------------------------------------------------------------------------------- //
template <class T, size_t d, class T1>
void maxval(
    const array<T, d>    &x,
    T1                   &max_value
) {

// ================================================================================== //
// template <class T, size_t d, class T1>                                             //
// void maxval(                                                                       //
//     const array<T, d>    &x,                                                       //
//     T1                   &max_value)                                               //
//                                                                                    //
// Find the maximum element in a C++ v10.0 array                                      //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x             : array<T, d>, input vector                                        //
// - max_value     : T1, maximum value of vector                                      //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - none                                                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
T1               value;

// Counters
int              i, n;

// ================================================================================== //
// FIND THE MIN-VALUE                                                                 //
// ================================================================================== //
if (d > 0) {
    maxval(x[0], max_value);
    for (i = 1; i < d; i++) {
        maxval(x[i], value);
        if (value > max_value) {
            max_value = value;
        }
    } //next i
}

return; };

// Operator "sum" =================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T, size_t d, class T1>
void sum(
    const array<T, d>  &x,
    T1                 &s
) {

// ================================================================================== //
// template <class T, size_t d, class T1>                                             //
// void sum(                                                                          //
//     const array<T, d>  &x,                                                         //
//     T1                 &s)                                                         //
//                                                                                    //
// Summation of arrays elements.                                                      //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : array<T, d>, input array                                              //
// - s        : T1, sum of element's array                                            //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - none                                                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
T1            value;

// Counters
int           i;

// ================================================================================== //
// PERFORM SUMMATION                                                                  //
// ================================================================================== //
if (d > 0) {
    sum(x[0], s);
    for (i = 1; i < d; i++) {
        sum(x[i], value);
        s += value;
    } //next i
}

return; };

// Operator "abs" =================================================================== //
template <class T, size_t d>
array<T, d> abs(
    const array<T, d>  &x
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> abs(                                                                   //
//     const array<T, d>  &x)                                                         //
//                                                                                    //
// Returns the absolute value of a C++ v10.0 array z[i] := abs(x[i])                  //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x            : array<T, d>, input vector                                         //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z            : array<T, d>, absolute value of a input vector                     //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
array<T, d>             z;

// Counters
int                     i;

// ================================================================================== //
// COMPUTE THE ABSOLUTE VALUE OF A VECTOR                                             //
// ================================================================================== //
if (d > 0) {
    for (i = 0; i < d; i++) {
        z[i] = abs(x[i]);
    } //next i
}

return(z); };

// Operator "pow" =================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
array<T, d> pow(
    array<T, d>        &x,
    double              p
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// array<T, d> pow(                                                                   //
//     array<T, d>        &x,                                                         //
//     double              p)                                                         //
//                                                                                    //
// Element-wise power of vector. Returns z[i] = pow(x[i], n)                          //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x       : array<T, d>, input vector                                              //
// - p       : double, exponent                                                       //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - y       : array<T, d>, output vector                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
array<T, d>      y;

// Counters
int              i;

// ================================================================================== //
// COMPUTE ELEMENT-WISE POWER                                                         //
// ================================================================================== //
for (i = 0; i < d; i++) {
    y[i] = pow(x[i], p);
} //next i

return(y); };

// Operator "norm" ================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
double norm_1(
    const array<T, d>  &x
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// double norm_1(                                                                     //
//     const array<T, d>  &x)                                                         //
//                                                                                    //
// Compute the 1-norm of a input vector.                                              //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x           : array<T, d>, input vector                                          //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - n           : double, norm of vector                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
double          z = 0.0;

// Counters
int             i, j;

// ================================================================================== //
// COMPUTE THE P-NORM                                                                 //
// ================================================================================== //
if (d > 0) {
    for (i = 0; i < d; i++) {
        z += abs(x[i]);
    } //next i
}

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
double norm_2(
    const array<T, d>  &x
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// double norm_2(                                                                     //
//     const array<T, d>  &x)                                                         //
//                                                                                    //
// Compute the 2-norm of a input vector.                                              //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x           : array<T, d>, input vector                                          //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - n           : double, norm of vector                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
double          z = 0.0;
double          t, y;

// Counters
int             i, j;

// ================================================================================== //
// COMPUTE THE P-NORM                                                                 //
// ================================================================================== //
if (d > 0) {
    for (i = 0; i < d; i++) {
        z += x[i]*x[i];
    } //next i
}

return(sqrt(z)); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
double norm(
    const array<T, d>  &x,
    int                 p
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// double norm(                                                                       //
//     const array<T, d>  &x,                                                         //
//     int                 p)                                                         //
//                                                                                    //
// Compute the p-norm of a input vector.                                              //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x           : array<T, d>, input vector                                          //
// - p           : int, norm index                                                    //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - n           : double, norm of vector                                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
double          z = 0.0;
double          t, y;

// Counters
int             i, j;

// ================================================================================== //
// COMPUTE THE P-NORM                                                                 //
// ================================================================================== //
if (p == 1) { return(norm_1(x)); }
if (p == 2) { return(norm_2(x)); }

if (d > 0) {
    for (i = 0; i < d; i++) {
        y = 1.0;
        t = abs(x[i]);
        for (j = 1; j <= p; j++) {
            y = y*t;
        } //next j
        //z += pow(abs(x[i]), p);
        z += y;
    } //next i
}

return(exp(log(max(z, 1.0e-307))/((double) p))); };

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
double norm_inf(
    const array<T, d>  &x
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// double norm_inf(                                                                   //
//     const array<T, d>  &x)                                                         //
//                                                                                    //
// Compute the inf-norm of a input array.                                             //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x           : array<T, d>, input vector                                          //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - n           : double, inf-norm of vector                                         //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
double          z = 0.0, y;

// Counters
int             i;

// ================================================================================== //
// COMPUTE THE inf-NORM                                                               //
// ================================================================================== //
if (d > 0) {
    z = abs(x[0]);
    for (i = 1; i < d; i++) {
        y = abs(x[i]);
        if (y > z) {
            z = y;
        }
    } //next i
}

return(z); };

// Operator "Dot_Product" =========================================================== //

// ---------------------------------------------------------------------------------- //
template <class T, size_t d>
T Dot_Product(
    const array<T, d>  &x,
    const array<T, d>  &y
) {

// ================================================================================== //
// template <class T, size_t d>                                                       //
// T Dot_Product(                                                                     //
//     const array<T, d>  &x,                                                         //
//     const array<T, d>  &y)                                                         //
//                                                                                    //
// Compute the dot product of two arrays.                                             //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x        : vector< T >, 1st argument of dot product                              //
// - y        : vector< T >, 2nd argument of dot product                              //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - dp       : T, dot product of input arrays                                        //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
T                   dp = ((T) 0.0);

// Counters
int                 i;

// ================================================================================== //
// COMPUTE THE DOT PRODUCT                                                            //
// ================================================================================== //
if (d > 0) {
    for (i = 0; i < d; i++) {
        dp += x[i]*y[i];
    } //next i
}

return(dp); };

// Operator "Cross_Product" ========================================================= //

// ---------------------------------------------------------------------------------- //
template <class T>
array<T, 3> Cross_Product(
    const array<T, 3> &x,
    const array<T, 3> &y
) {

// =================================================================================== //
// template <class T>                                                                  //
// array<T, 3> Cross_Product(                                                          //
//     const array<T, 3> &x,                                                           //
//     const array<T, 3> &y)                                                           //
//                                                                                     //
// Compute the cross product between x and y.                                          //
// =================================================================================== //
// INPUT                                                                               //
// =================================================================================== //
// - x,     : array<T, 3>, 1st argument of the external product                        //
// - y,     : array<T, 3>, 2nd argument of the external product                        //
// =================================================================================== //
// INPUT                                                                               //
// =================================================================================== //
// - z      : array<T, 3>, external product between x and y                            //
// =================================================================================== //

// =================================================================================== //
// VARIABLES DECLARATION                                                               //
// =================================================================================== //
array<T, 3>      z;

// =================================================================================== //
// COMPUTE THE EXTERNAL PRODUCT                                                        //
// =================================================================================== //
z[0] = x[1] * y[2] - x[2] * y[1];
z[1] = x[2] * y[0] - x[0] * y[2];
z[2] = x[0] * y[1] - x[1] * y[0];

return (z); };

// ---------------------------------------------------------------------------------- //
template <class T>
T Cross_Product(
    const array<T, 2> &x,
    const array<T, 2> &y
) {

// =================================================================================== //
// template <class T>                                                                  //
// double Cross_Product(                                                               //
//     const array<T, 2> &x,                                                           //
//     const array<T, 2> &y)                                                           //
//                                                                                     //
// Compute the cross product between x and y.                                          //
// =================================================================================== //
// INPUT                                                                               //
// =================================================================================== //
// - x,     : array<T, 2>, 1st argument of the external product                        //
// - y,     : array<T, 2>, 2nd argument of the external product                        //
// =================================================================================== //
// INPUT                                                                               //
// =================================================================================== //
// - z      : double, external product between x and y                                 //
// =================================================================================== //

// =================================================================================== //
// VARIABLES DECLARATION                                                               //
// =================================================================================== //
T      z;

// =================================================================================== //
// COMPUTE THE EXTERNAL PRODUCT                                                        //
// =================================================================================== //
z = x[0] * y[1] - x[1] * y[0];

return (z); };

