// ================================================================================== //
//                                  OPERATORS                                         //
//                                                                                    //
// Operators for standard template library vectors.                                   //
// ================================================================================== //
// INFO                                                                               //
// ================================================================================== //
// Author     : Alessandro Alaia                                                      //
// Version    : v3.0                                                                  //
//                                                                                    //
// All rights reserved.                                                               //
// ================================================================================== //

// ================================================================================== //
// TEMPLATE IMPLEMENTATION                                                            //
// ================================================================================== //

// Operator "+" ===================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T>
vector< T > operator+ (
  const vector< T > &x,
  const vector< T > &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< T > operator+ (                                                            //
//   const vector< T > &x,                                                            //
//   const vector< T > &y)                                                            //
//                                                                                    //
// Element-wise sum between vectors. Returns:                                         //
//      z = x + y, s.t. z[i] = x[i] + y[i]                                            //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : vector< T >, 1st argument of '+' operator                                  //
// - y   : vector< T >, 2nd argument of '+' operator                                  //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : vector< T >, sum of x, y                                                   //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
unsigned int       n = min(x.size(), y.size());
vector< T >        z(n, T(0));

// ================================================================================== //
// PERFORM SUM                                                                        //
// ================================================================================== //
for (int i = 0; i < n; i++){
    z[i] = x[i] + y[i];
};

return (z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< T > operator+ (
  const vector< T > &x,
  const T           &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< T > operator+ (                                                            //
//   const vector< T > &x,                                                            //
//   const T           &y)                                                            //
//                                                                                    //
// Element-wise sum between vector and scalar. Returns:                               //
//        z = x + y, s.t z[i] = x[i] + y                                              //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : vector< T >, 1st argument of '+' operator                                  //
// - y   : T          , 2nd argument of '+' operator                                  //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : vector< T >, sum of x, y                                                   //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
unsigned int        n = x.size();
vector< T >         z(n, T(0));

// ================================================================================== //
// PERFORM SUM                                                                        //
// ================================================================================== //
for (int i = 0; i < n; i++){
    z[i] = x[i] + y;
};

return (z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< T > operator+ (
  const T           &x,
  const vector< T > &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< T > operator+ (                                                            //
//   const T           &x,                                                            //
//   const vector< T > &y)                                                            //
//                                                                                    //
// Element-wise sum between scalar and vector. Returns:                               //
//     z = x + y, s.t. z[i] = x + y[i]                                                //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : vector< T >, 1st argument of '+' operator                                  //
// - y   : T          , 2nd argument of '+' operator                                  //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : vector< T >, sum of x, y                                                   //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
vector< T >   z;

// ================================================================================== //
// PERFORM SUM                                                                        //
// ================================================================================== //
z = y + x;

return (z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< vector< T > > operator+ (
    const vector< vector< T > >     &x,
    const T                         &y
) {

// ================================================================================== //
// vector< vector< T > > operator+ (                                                  //
//     const T                         &x,                                            //
//     const vector< vector< T > >     &y)                                            //
//                                                                                    //
// Element-wise sum between scalar and vector. Returns:                               //
//     z = x + y, s.t. z[i][j] = x[i][j] + y                                          //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : vector< vector< T > >, 1st argument of '+' operator                        //
// - y   : T, 2nd argument of '+' operator                                            //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : vector< vector< T > >, sum of x, y                                         //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
unsigned int            n = x.size();
vector< vector< T > >   z(n);

// ================================================================================== //
// PERFORM SUM                                                                        //
// ================================================================================== //
for (int i = 0; i < n; i++) {
    z[i] = x[i] + y;
} //next i

return (z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< vector< T > > operator+ (
    const T                         &x,
    const vector< vector< T > >     &y
) {

// ================================================================================== //
// vector< vector< T > > operator+ (                                                  //
//     const T                         &x,                                            //
//     const vector< vector< T > >     &y                                             //
//                                                                                    //
// Element-wise sum between scalar and vector. Returns:                               //
//     z = x + y, s.t. z[i][j] = x + y[i][j]                                          //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : T, 1st argument of '+' operator                                            //
// - y   : vector< vector< T > >, 2nd argument of '+' operator                        //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : vector< vector< T > >, sum of x, y                                         //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
vector< vector< T > >   z;

// ================================================================================== //
// PERFORM SUM                                                                        //
// ================================================================================== //
z = y + x;

return (z); };

// Operator "-" ===================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T>
vector< T > operator- (
  const vector< T > &x,
  const vector< T > &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< T > operator- (                                                            //
//   const vector< T > &x,                                                            //
//   const vector< T > &y)                                                            //
//                                                                                    //
// Element-wise difference between vectors. Returns:                                  //
//     z = x - y, s.t. z[i] = x[i] - y[i]                                             //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : vector< T >, 1st argument of '-' operator                                  //
// - y   : vector< T >, 2nd argument of '-' operator                                  //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : vector< T >, difference of x, y                                            //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
unsigned int        n = min(x.size(), y.size());
vector< T >         z(n, T(0));

// ================================================================================== //
// PERFORM DIFFERENCE                                                                 //
// ================================================================================== //
for (int i = 0; i < n; i++){
    z[i] = x[i] - y[i];
};

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< T > operator- (
  const vector< T > &x,
  const T           &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< T > operator- (                                                            //
//   const vector< T > &x,                                                            //
//   const T           &y)                                                            //
//                                                                                    //
// Element-wise difference between vector and constant. Return:                       //
//     z = x - y, s.t. z[i] = x[i] - y                                                //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : vector< T >, 1st argument of '-' operator                                  //
// - y   : T, 2nd argument of '-' operator                                            //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : vector< T >, difference of x, y                                            //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
unsigned int        n = x.size();
vector< T >         z(n, T(0));

// ================================================================================== //
// PERFORM DIFFERENCE                                                                 //
// ================================================================================== //
for (int i = 0; i < n; i++){
    z[i] = x[i] - y;
};

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< T > operator- (
  const T           &x,
  const vector< T > &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< T > operator- (                                                            //
//   const T           &x,                                                            //
//   const vector< T > &y)                                                            //
//                                                                                    //
// Element-wise difference between constant and vector. Returns:                      //
//     z = x - y, s.t. z[i] = x - y[i]                                                //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : T, 1st argument of '-' operator                                            //
// - y   : vector< T >, 2nd argument of '-' operator                                  //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : vector< T >, difference of x, y                                            //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
vector< T >   z;

// =================================================================================== //
// PERFORM DIFFERENCE                                                                  //
// =================================================================================== //
z = y - x;

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< vector< T > > operator- (
  const T                       &x,
  const vector< vector< T > >   &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< vector< T > > operator- (                                                  //
//   const T                       &x,                                                //
//   const vector< vector< T > >   &y)                                                //
//                                                                                    //
// Element-wise difference between constant and vector. Returns:                      //
//     z = x - y, s.t. z[i] = x - y[i][j]                                             //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : T, 1st argument of '-' operator                                            //
// - y   : vector< vector< T > >, 2nd argument of '-' operator                        //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : vector< vector< T > >, difference of x, y                                  //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
unsigned int            n = y.size();
vector< vector< T > >   z(n);

// ================================================================================== //
// PERFORM DIFFERENCE                                                                 //
// ================================================================================== //
for (int i = 0; i < n; i++) {
    z[i] = x - y[i];
} //next i

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< vector< T > > operator- (
  const vector< vector< T > >   &x,
  const T                       &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< vector< T > > operator- (                                                  //
//   const vector< vector< T > >   &x,                                                //
//   const T                       &y)                                                //
//                                                                                    //
// Element-wise difference between constant and vector. Returns:                      //
//     z = x - y, s.t. z[i] = x[i][j] - y                                             //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : vector< vector< T > >, 1st argument of '-' operator                        //
// - y   : T, 2nd argument of '-' operator                                            //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : vector< vector< T > >, difference of x, y                                  //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
vector< vector< T > >   z;

// ================================================================================== //
// PERFORM DIFFERENCE                                                                 //
// ================================================================================== //
z = y - x;

return(z); };

// Operator "*" ===================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T>
vector< T > operator* (
  const vector< T > &x,
  const vector< T > &y
) {

// ================================================================================== //
// vector< T > operator* (                                                            //
//   const vector< T > &x,                                                            //
//   const vector< T > &y)                                                            //
//                                                                                    //
// Element-wise product between vectors. Returns:                                     //
//      z = x * y, s.t. z[i] = x[i]*y[i]                                              //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : vector< T >, 1st argument of '*' operator                                  //
// - y   : vector< T >, 2nd argument of '*' operator                                  //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : vector< T >, elementwise product between x, y                              //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
unsigned int       n = min(x.size(), y.size());
vector<T>          z(n, T(0));

// ================================================================================== //
// PERFORM PRODUCT                                                                    //
// ================================================================================== //
for (int i = 0; i < n; i++){
    z[i] = x[i] * y[i];
};

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< T > operator* (
  const vector< T > &x,
  const T           &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< T > operator* (                                                            //
//   const vector< T > &x,                                                            //
//   const T           &y)                                                            //
//                                                                                    //
// Element-wise product between vector and constant. Returns:                         //
//      z = x * y, s.t. z[i] = x[i]*y                                                 //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : vector< T >, 1st argument of '*' operator                                  //
// - y   : T, 2nd argument of '*' operator                                            //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : vector< T >, elementwise product between x, y                              //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
unsigned int       n = x.size();
vector< T >        z(n, T(0));

// =================================================================================== //
// PERFORM PRODUCT                                                                     //
// =================================================================================== //
for (int i = 0; i < n; i++){
    z[i] = x[i] * y;
};

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< T > operator* (
  const T           &x,
  const vector< T > &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< T > operator* (                                                            //
//   const T         &x,                                                              //
//   const vector< T > &y)                                                            //
//                                                                                    //
// Element-wise product between constant and vector. Returns:                         //
//      z = x * y, s.t. z[i] = x*y[i]                                                 //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : T, 1st argument of '*' operator                                            //
// - y   : vector< T >, 2nd argument of '*' operator                                  //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : vector< T >, elementwise product between x, y                              //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
vector< T >   z;                                                                     

// ================================================================================== //
// PERFORM PRODUCT                                                                    //
// ================================================================================== //
z = y * x;

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< vector< T > > operator* (
  const T                     &x,
  const vector< vector< T > > &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< vector< T > > operator* (                                                  //
//   const T                     &x,                                                  //
//   const vector< vector< T > > &y)                                                  //
//                                                                                    //
// Element-wise product between constant and vector. Returns:                         //
//      z = x * y, s.t. z[i][j] = x*y[i][j]                                           //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : T, 1st argument of '*' operator                                            //
// - y   : vector< vector< T > >, 2nd argument of '*' operator                        //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : vector< vector< T > >, elementwise product between x, y                    //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
unsigned int            n = y.size();
vector< vector< T > >   z(n);

// ================================================================================== //
// PERFORM PRODUCT                                                                    //
// ================================================================================== //
for (int i = 0; i < n; i++) {
    z[i] = x * y[i];
} //next i

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< vector< T > > operator* (
  const vector< vector< T > > &x,
  const T                     &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< vector< T > > operator* (                                                  //
//   const vector< vector< T > > &x,                                                  //
//   const T                     &y)                                                  //
//                                                                                    //
// Element-wise product between constant and vector. Returns:                         //
//      z = x * y, s.t. z[i][j] = x[i][j]*y                                           //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : vector< vector< T > >, 1st argument of '*' operator                        //
// - y   : T, 2nd argument of '*' operator                                            //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : vector< vector< T > >, elementwise product between x, y                    //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
vector< vector< T > >   z;

// ================================================================================== //
// PERFORM PRODUCT                                                                    //
// ================================================================================== //
z = y*x;

return(z); };

// Operator "/" ===================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T>
vector< T > operator/ (
  const vector< T > &x,
  const vector< T > &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< T > operator/ (                                                            //
//   const vector< T > &x,                                                            //
//   const vector< T > &y)                                                            //
//                                                                                    //
// Element-wise division between vectors. Retuns:                                     //
//    z = x / y, s.t. z[i] = x[i]/y[i].                                               //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x   : vector< T >, 1st argument of '/' operator                                  //
// - y   : vector< T >, 2nd argument of '/' operator                                  //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z   : vector< T >, elementwise division between x, y                             //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
unsigned int       n = min(x.size(), y.size());
vector<T>          z(n, T(0));

// ================================================================================== //
// PERFORM DIVISION                                                                   //
// ================================================================================== //
for (int i = 0; i < n; i++){
    z[i] = x[i] / y[i];
};

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< T > operator/ (
  const vector< T > &x,
  const T           &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< T > operator/ (                                                            //
//   const vector< T > &x,                                                            //
//   const T           &y)                                                            //
//                                                                                    //
// Element-wise division between vector and constant. Retuns:                         //
//    z = x / y, s.t. z[i] = x[i]/y                                                   //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x    : vector< T >, 1st argument of "/" operator                                 //
// - y    : T, 2nd argument of "/" operator                                           //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z    : vector< T >, result of element-wise division                              //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
unsigned int  n = x.size();
vector< T >   z(n, T(0));

// Counters
int           i;

// ================================================================================== //
// DIVIDE X BY Y                                                                      //
// ================================================================================== //
for (i = 0; i < n; i++) {
    z[i] = x[i]/y;
}

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< T > operator/ (
  const T           &x,
  const vector< T > &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< T > operator/ (                                                            //
//   const T           &x,                                                            //
//   const vector< T > &y)                                                            //
//                                                                                    //
// Element-wise division between constant and vector. Retuns:                         //
//    z = x / y, s.t. z[i] = x/y[i].                                                  //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x    : T, 1st argument of "/" operator                                           //
// - y    : vector< T >, 2nd argument of "/" operator                                 //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z    : vector< T >, result of element-wise division                              //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
unsigned int   n = y.size();
vector< T >    z(n);

// ================================================================================== //
// DIVIDE X BY Y                                                                      //
// ================================================================================== //
for (int i = 0; i < n; i++) {
    z[i] = x/y[i];
}

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< vector< T > > operator/ (
  const T                       &x,
  const vector< vector< T > >   &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< vector< T > > operator/ (                                                  //
//   const T                     &x,                                                  //
//   const vector< vector< T > > &y)                                                  //
//                                                                                    //
// Element-wise division between constant and vector. Retuns:                         //
//    z = x / y, s.t. z[i][j] = x/y[i][j].                                            //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x    : T, 1st argument of "/" operator                                           //
// - y    : vector< vector< T > >, 2nd argument of "/" operator                       //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z    : vector< vector< T > >, result of element-wise division                    //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
unsigned int            n = y.size();
vector< vector< T > >   z(n);

// ================================================================================== //
// DIVIDE X BY Y                                                                      //
// ================================================================================== //
for (int i = 0; i < n; i++) {
    z[i] = x/y[i];
}

return(z); };

// ---------------------------------------------------------------------------------- //
template <class T>
vector< vector< T > > operator/ (
  const vector< vector< T > >   &x,
  const T                       &y
) {

// ================================================================================== //
// template <class T>                                                                 //
// vector< vector< T > > operator/ (                                                  //
//   const vector< vector< T > >   &x,                                                //
//   const T                       &y)                                                //
//                                                                                    //
// Element-wise division between constant and vector. Retuns:                         //
//    z = x / y, s.t. z[i][j] = x[i][j]/y.                                            //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - x    : vector< vector< T > >, 1st argument of "/" operator                       //
// - y    : T, 2nd argument of "/" operator                                           //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - z    : vector< vector< T > >, result of element-wise division                    //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //
unsigned int            n = x.size();
vector< vector< T > >   z(n);

// ================================================================================== //
// DIVIDE X BY Y                                                                      //
// ================================================================================== //
for (int i = 0; i < n; i++) {
    z[i] = x[i]/y;
}

return(z); };

// Output operator ================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T>
ostream& operator<< (
    ostream              &out,
    const vector< T >    &x
) {

// ================================================================================== //
// template <class T>                                                                 //
// ostream& operator<< (                                                              //
//     ostream              &out,                                                     //
//     const vector< T >    &x)                                                       //
//                                                                                    //
// Output stream for vector.                                                          //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - out       : ostream, with output stream                                          //
// - x         : vector< T >, with vector to be streamed                              //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - out       : ostream, with updated output stream                                  //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
unsigned int         n = x.size();

// Counters
// none

// ================================================================================== //
// OUTPUT VECTOR CONTENT                                                              //
// ================================================================================== //
if (n == 0) {
    out << "[]";
    return(out);
}
out << "[";
for (int i = 0; i < n-1; i++) {
    out << x[i] << ", ";
} //next i
out << x[n-1] << "]";

return(out); };

// ---------------------------------------------------------------------------------- //
template <class T>
ofstream& operator<< (
    ofstream             &out,
    const vector< T >    &x
) {

// ================================================================================== //
// template <class T>                                                                 //
// ofstream& operator<< (                                                             //
//     ofstream             &out,                                                     //
//     const vector< T >    &x)                                                       //
//                                                                                    //
// Output file stream for vector.                                                     //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - out       : ofstream, with output file stream                                    //
// - x         : vector< T >, with vector to be streamed                              //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - out       : ofstream, with updated output stream                                 //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
unsigned int         n = x.size();

// Counters
// none

// ================================================================================== //
// OUTPUT VECTOR CONTENT                                                              //
// ================================================================================== //
if (n == 0) {
    return(out);
}
for (int i = 0; i < n-1; i++) {
    out << x[i] << " ";
} //next i
out << x[n-1];

return(out); };

// Input operator =================================================================== //

// ---------------------------------------------------------------------------------- //
template <class T>
istream& operator>> (
    istream              &in,
    vector< T >          &x
) {

// ================================================================================== //
// template <class T>                                                                 //
// istream& operator>> (                                                              //
//     istream              &in,                                                      //
//     vector< T >          &x)                                                       //
//                                                                                    //
// Input stream for vector.                                                           //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - in        : istream, with input stream                                           //
// - x         : vector< T >, with vector to be streamed                              //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - x         : vector< T >, update streamed vector                                  //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
T                    dummy;
unsigned int         n = x.size();

// Counters
int                  i;

// ================================================================================== //
// EXTRACT STREAM CONTENT INTO VECTOR                                                 //
// ================================================================================== //
i = 0;
while ((in.good()) && (i < n)) {
    if (in >> dummy) { x[i] = dummy; i++; }
} //next i
while (in.good()) {
    if (in >> dummy) { x.push_back(dummy); }
}

return(in); };

// ---------------------------------------------------------------------------------- //
template <class T>
ifstream& operator>> (
    ifstream             &in,
    vector< T >          &x
) {

// ================================================================================== //
// template <class T>                                                                 //
// ifstream& operator>> (                                                             //
//     ifstream             &in,                                                      //
//     vector< T >          &x)                                                       //
//                                                                                    //
// Input file stream for vector.                                                      //
// ================================================================================== //
// INPUT                                                                              //
// ================================================================================== //
// - in        : ifstream, with input file stream                                     //
// - x         : vector< T >, with vector to be streamed                              //
// ================================================================================== //
// OUTPUT                                                                             //
// ================================================================================== //
// - x         : vector< T > updated vector.                                          //
// ================================================================================== //

// ================================================================================== //
// VARIABLES DECLARATION                                                              //
// ================================================================================== //

// Local variables
T       dummy;

// Counters
int     i, n = x.size();

// ================================================================================== //
// EXTRACT FILE CONTENT INTO VECTOR                                                   //
// ================================================================================== //
i = 0;
while ((in.good()) && (i < n)) {
    if (in >> dummy) { x[i] = dummy; i++; }
} //next i
while (in.good()) {
    if (in >> dummy) { x.push_back(dummy); }
}

return(in); };

