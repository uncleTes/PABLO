// ========================================================================== //
//                              DGF IO FUNCTIONS                              //
//                                                                            //
// I/O functions for .dgf file formats                                        //
// ========================================================================== //
// INTFO                                                                      //
// ========================================================================== //
// Author  : Alessandro Alaia                                                 //
// Version : v3.0                                                             //
//                                                                            //
// All rights reserved.                                                       //
// ========================================================================== //

// ========================================================================== //
// INCLUDES                                                                   //
// ========================================================================== //
# include "DGF_IOFunct.hpp"

// ========================================================================== //
// IMPLEMENTATIONS                                                            //
// ========================================================================== //

// class DGF_obj methods ==================================================== //

// Constructors ------------------------------------------------------------- //

// -------------------------------------------------------------------------- //
DGF_obj::DGF_obj(
    void
) {

// ========================================================================== //
// DGF_obj::DGF_obj(                                                          //
//     void)                                                                  //
//                                                                            //
// Default constructor for class DGF_obj.                                     //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// SET MEMBERS TO DEFAULT VALUE                                               //
// ========================================================================== //

// General info
dgf_name = "";

// Error flags
err = 0;

// dgf content
data.nV = -1;
data.nS = -1;


return; }

// -------------------------------------------------------------------------- //
DGF_obj::DGF_obj(
    string      filename
) {

// ========================================================================== //
// DGF_obj::DGF_obj(                                                          //
//     string      filename)                                                  //
//                                                                            //
// Custom constructor #1 for DGF_obj.                                         //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - filename      : string, dgf file name                                    //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// SET MEMBERS TO DEFAULT VALUE                                               //
// ========================================================================== //

// General info
dgf_name = trim(filename);

// Error flags
err = 0;

// dgf content
data.nV = -1;
data.nS = -1;

return; }

// Destructors -------------------------------------------------------------- //
// none

// Public methods ----------------------------------------------------------- //

// -------------------------------------------------------------------------- //
void DGF_obj::open(
    string      mode
) {

// ========================================================================== //
// void DGF_obj::open(                                                        //
//     string      mode)                                                      //
//                                                                            //
// Open input/output stream to dgf file.                                      //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - mode     : string, stream mode                                           //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// OPEN STREAM                                                                //
// ========================================================================== //
if (mode.compare("in") == 0) {
    if (!ifile_handle.is_open()) {

        // Close open output stream
        close("out");

        // Open input stream
        ifile_handle.open(dgf_name, ifstream::in | ifstream::binary);
        if (!ifile_handle.good()) { err = 1; }

    }
}
else if (mode.compare("out") == 0) {
    if (!ofile_handle.is_open()) {

        // Close open input stream
        close("in");

        // Open output stream
        ofile_handle.open(dgf_name, ifstream::out);
        if (!ofile_handle.good()) { err = 1; }        

    }
}
else if (mode.compare("app") == 0) {
    if (!ofile_handle.is_open()) {

        // Close open input stream
        close("in");

        // Open output stream in "append" mode
        ofile_handle.open(dgf_name, ifstream::out | ifstream::app);
        if (!ofile_handle.good()) { err = 1; }

    }
}

return; };

// -------------------------------------------------------------------------- //
void DGF_obj::close(
    string      mode
) {

// ========================================================================== //
// void DGF_obj::close(                                                       //
//     string      mode)                                                      //
//                                                                            //
// Close input/output stream to dgf file.                                     //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - mode      : string, stream type to be closed                             //
//               "in"    --> close input stream                               //
//               "out"   --> close output stream                              //
//               "app"   --> close output stream                              //
//               "inout" --> close input & output stream                      //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// CLOSE STREAM                                                               //
// ========================================================================== //
if (mode.compare("in") == 0) {
    if (ifile_handle.is_open()) {
        ifile_handle.close();
    }
}
else if (mode.compare("out") == 0) {
    if (ofile_handle.is_open()) {
        ofile_handle.close();
    }
}
else if (mode.compare("app") == 0) {
    if (ofile_handle.is_open()) {
        ofile_handle.close();
    }
}
else if (mode.compare("inout") == 0) {
    if (ifile_handle.is_open()) {
        ifile_handle.close();
    }
    if (ofile_handle.is_open()) {
        ofile_handle.close();
    }
}



return; };

// -------------------------------------------------------------------------- //
void DGF_obj::clear(
    void
) {

// ========================================================================== //
// void DGF_obj::clear(                                                       //
//     void)                                                                  //
//                                                                            //
// Reset mebers to default values.                                            //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// RESET MEMBERS VALUES TO DEFAULT                                                       //
// ========================================================================== //

// Error flags
err = 0;
dgf_error.resize(0);

// dgf content
data.nV = -1;
data.nS = -1;
data.nV_data.resize(0);
data.sV_data.resize(0);
data.nS_data.resize(0);
data.sS_data.resize(0);

// Close open stream
close("inout");

return; };

// -------------------------------------------------------------------------- //
void DGF_obj::display(
    ostream     &out
) {

// ========================================================================== //
// void DGF_obj::display(                                                     //
//     ostream     &out)                                                      //
//                                                                            //
// Display dgf content and infos.                                             //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - out            : ostream, output stream                                  //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int         n, i;

// ========================================================================== //
// DISPLAY INFOS                                                              //
// ========================================================================== //

// General infos ------------------------------------------------------------ //
out << "dgf object:" << endl;
out << "  dgf name              : '" << dgf_name << "'" << endl;
out << "  input stream status   : ";
if (ifile_handle.is_open()) { out << "open"; }
else                        { out << "closed"; }
out << endl;
out << "  output stream status  : ";
if (ofile_handle.is_open()) { out << "open"; }
else                        { out << "closed"; }
out << endl;

// Error status ------------------------------------------------------------- //
if (err == 1) {
    out << "  **ERROR** dgf file is missing!!" << endl;
}

// Infos -------------------------------------------------------------------- //
if (data.nV >= 0) {
    out << "  # of vertices         : " << data.nV << endl;
}
if (data.nS >= 0) {
    out << "  # of simplicies       : " << data.nS << endl;
}
if (data.nV_data.size() > 0) {
    out << "  vertex dataset names  : " << data.sV_data << endl;
    out << "  # of vertex data      : " << data.nV_data << endl;
}
if (data.nS_data.size() > 0) {
    out << "  simplex dataset names : " << data.sS_data << endl;
    out << "  # of simplex data     : " << data.nS_data << endl;
}

// Error on data sets ------------------------------------------------------- //
if (dgf_error.size() > 0) {

    out << "ERROR report: " << endl;

    // Vertex
    out << "  vertex: " << endl;
    switch (dgf_error[0][0]) {
        case 0: {out << "    no errors" << endl; break; }
        case 1: {out << "    **WARNING** unterminated data block!!" << endl; break; }
        case 2: {out << "    **WARNING** missing data" << endl; break; }
    };

    // Simplex
    out << "  simplex: " << endl;
    switch (dgf_error[1][0]) {
        case 0: {out << "    no errors" << endl; break; }
        case 1: {out << "    **WARNING** unterminated data block!!" << endl; break; }
        case 2: {out << "    **WARNING** missing data" << endl; break; }
    };

    // Vertex data sets
    n = data.nV_data.size();
    for (i = 0; i < n; i++) {
        out << "  vertex dataset '" << data.sV_data[i] << "': " << endl;
        switch (dgf_error[2][i]) {
            case 0: {out << "    no errors" << endl; break; }
            case 1: {out << "    **WARNING** unterminated data block!!" << endl; break; }
            case 2: {out << "    **WARNING** missing data" << endl; break; }
        };
    } //next i

    // Simplex data sets
    n = data.nS_data.size();
    for (i = 0; i < n; i++) {
        out << "  simplex dataset '" << data.sS_data[i] << "': " << endl;
        switch (dgf_error[3][i]) {
            case 0: {out << "    no errors" << endl; break; }
            case 1: {out << "    **WARNING** unterminated data block!!" << endl; break; }
            case 2: {out << "    **WARNING** missing data" << endl; break; }
        };
    } //next i
    
}

return; }

// -------------------------------------------------------------------------- //
void DGF_obj::scan(
    void
) {

// ========================================================================== //
// void DGF_obj::scan(                                                        //
//     void)                                                                  //
//                                                                            //
// Scan dgf file and returns infos                                            //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// OPEN INPUT STREAM                                                          //
// ========================================================================== //
open("in");

// ========================================================================== //
// SCAN DGF FILE                                                              //
// ========================================================================== //
err = Scan_DGF(ifile_handle,
               data.nV,
               data.nS,
               data.sV_data,
               data.sS_data,
               data.nV_data,
               data.nS_data);

// ========================================================================== //
// CLOSE INPUT STREAM                                                         //
// ========================================================================== //
close("in");

return; }

// -------------------------------------------------------------------------- //
void DGF_obj::check(
    void
) {

// ========================================================================== //
// void DGF_obj::check(                                                       //
//     void)                                                                  //
//                                                                            //
// Check data coherency in dgf file.                                          //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// SCAN DGF FILE                                                              //
// ========================================================================== //
scan();

// ========================================================================== //
// OPEN INPUT STREAM                                                          //
// ========================================================================== //
open("in");

// ========================================================================== //
// CHECK DATA COHERENCY                                                       //
// ========================================================================== //
err = Check_DGF(ifile_handle, dgf_error);

// ========================================================================== //
// CLOSE INPUT STREAM                                                         //
// ========================================================================== //
close("in");

return; }

// -------------------------------------------------------------------------- //
void DGF_obj::load(
    int         &nV,
    int         &nS,
    dvector2D   &V,
    ivector2D   &S
) {

// ========================================================================== //
// void DGF_obj::load(                                                        //
//     int         &nV,                                                       //
//     int         &nS,                                                       //
//     dvector2D   &V,                                                        //
//     ivector2D   &S)                                                        //
//                                                                            //
// Load mesh data from dgf file.                                              //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - nV          : int, number of mesh vertices                               //
// - nS          : int, number of simplicies                                  //
// - V           : dvector2D, vertex coordinate list. V[i][0], V[i][1], ...   //
//                 are the x, y, ... coordinates of the i-th vertex           //
// - S           : ivector2D, simplex-vertex connectivity S[i][0], S[i][1],   //
//                 ... are the global indices of vertices of the i-th simplex //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// OPEN INPUT STREAM                                                          //
// ========================================================================== //
open("in");

// ========================================================================== //
// READ MESH DATA FROM DGF FILE                                               //
// ========================================================================== //
err = Read_DGF_mesh(ifile_handle, nV, nS, V, S);

// ========================================================================== //
// CLOSE INPUT STREAM                                                         //
// ========================================================================== //
close("in");

return; };

// -------------------------------------------------------------------------- //
void DGF_obj::save(
    int         &nV,
    int         &nS,
    dvector2D   &V,
    ivector2D   &S
) {

// ========================================================================== //
// void DGF_obj::save(                                                        //
//     int         &nV,                                                       //
//     int         &nS,                                                       //
//     dvector2D   &V,                                                        //
//     ivector2D   &S)                                                        //
//                                                                            //
// SAve mesh data into a dgf file.                                            //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - nV          : int, number of mesh vertices                               //
// - nS          : int, number of simplicies                                  //
// - V           : dvector2D, vertex coordinate list. V[i][0], V[i][1], ...   //
//                 are the x, y, ... coordinates of the i-th vertex           //
// - S           : ivector2D, simplex-vertex connectivity S[i][0], S[i][1],   //
//                 ... are the global indices of vertices of the i-th simplex //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// OPEN OUTPUT STREAM                                                         //
// ========================================================================== //
open("out");

// ========================================================================== //
// READ MESH DATA FROM DGF FILE                                               //
// ========================================================================== //
err = Write_DGF_mesh(ofile_handle, nV, nS, V, S);

// ========================================================================== //
// CLOSE OUTPUT STREAM                                                        //
// ========================================================================== //
close("out");

return; }

// Private methods ---------------------------------------------------------- //

// -------------------------------------------------------------------------- //
void DGF_obj::load_vdata(
    void
) {

// ========================================================================== //
// void load_vdata(                                                           //
//     void)                                                                  //
//                                                                            //
// Dummy function for recursive variadic template "load_vdata".               //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// CLOSE INPUT STREAM                                                         //
// ========================================================================== //
close("in");

return; }

// -------------------------------------------------------------------------- //
void DGF_obj::load_sdata(
    void
) {

// ========================================================================== //
// void load_sdata(                                                           //
//     void)                                                                  //
//                                                                            //
// Dummy function for recursive variadic template "load_sdata".               //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// CLOSE INPUT STREAM                                                         //
// ========================================================================== //
close("in");

return; }

// -------------------------------------------------------------------------- //
void DGF_obj::append_vdata(
    void
) {

// ========================================================================== //
// void DGF_obj::append_vdata(                                                //
//     void)                                                                  //
//                                                                            //
// Dummy function for recursive variadic template "append_vdata".             //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// CLOSE OUTPUT STREAM                                                        //
// ========================================================================== //
close("app");

return; }

// -------------------------------------------------------------------------- //
void DGF_obj::append_sdata(
    void
) {

// ========================================================================== //
// void DGF_obj::append_sdata(                                                //
//     void)                                                                  //
//                                                                            //
// Dummy function for recursive variadic template "append_sdata".             //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// CLOSE OUTPUT STREAM                                                        //
// ========================================================================== //
close("app");

return; }

// Scanning routines ======================================================== //

// -------------------------------------------------------------------------- //
unsigned int Scan_DGF_data(
    ifstream    &file_handle,
    int         &n
) {

// ========================================================================== //
// unsigned int Scan_DGF_data(                                                //
//     ifstream    &file_handle,                                              //
//     int         &n)                                                        //
//                                                                            //
// Scan data block and returns infos.                                         //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - file_handle     : ifstream, input stream to dgf file.                    //
// - n               : int, number of data in dataset                         //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - err             : unsigned int, error flag:                              //
//                     err = 0     --> no errors encountered                  //
//                     err = 1     --> file is missing or cannot be opened    //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
long int        current_pos;
string          line, word;
stringstream    sline;

// Counters
// none

// ========================================================================== //
// CHECK STREAM STATUS                                                        //
// ========================================================================== //
if (!file_handle.good()) { return(1); }

// ========================================================================== //
// SCAN DATA SET                                                              //
// ========================================================================== //

// Get current line
current_pos = file_handle.tellg();
word = "begin";

// Loop until end of data block
while (!file_handle.eof()
    && ((word.compare("#") != 0)
    &&  (word.compare("VERTEX") != 0)
    &&  (word.compare("SIMPLEX") != 0)
    &&  (word.compare("VERTEXDATA") != 0)
    &&  (word.compare("SIMPLEXDATA") != 0))) {

    // Get next line
    current_pos = file_handle.tellg();
    getline(file_handle, line);
    line = trim(line);
    sline.clear();
    sline.str(line);

    // Check if data exist
    if (sline >> word) {
        n++;
    }
    
} //next line
if ((word.compare("#") == 0)
 || (word.compare("VERTEX") == 0)
 || (word.compare("SIMPLEX") == 0)
 || (word.compare("VERTEXDATA") == 0)
 || (word.compare("SIMPLEXDATA") == 0)){
    file_handle.clear();
    file_handle.seekg(current_pos);
    n--;
}

return(0); }

// -------------------------------------------------------------------------- //
unsigned int Scan_DGF(
    ifstream    &file_handle,
    int         &nV,
    int         &nS,
    svector1D   &sV_data,
    svector1D   &sS_data,
    ivector1D   &nV_data,
    ivector1D   &nS_data
) {

// ========================================================================== //
// unsigned int Scan_DGF(                                                     //
//     ifstream    &file_handle,                                              //
//     int         &nV,                                                       //
//     int         &nS,                                                       //
//     svector1D   &sV_data,                                                  //
//     svector1D   &sS_data,                                                  //
//     ivector1D   &nV_data,                                                  //
//     ivector1D   &nS_data)                                                  //
//                                                                            //
// Scan dgf file and returns infos.                                           //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - file_handle  : ifstream, input stream to dgf file.                       //
// - nV           : int, number of mesh vertices                              //
// - nS           : int, number of mesh simplicies                            //
// - sV_data      : svector1D, names of vertex dataset                        //
// - sS_data      : svector1D, names of simplex dataset                       //
// - nV_data      : ivector1D, number of data for each vertex dataset         //
// - nS_data      : ivector1D, number of data for each simplex dataset        //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - err          : unsigned int, error flag;                                 //
//                  err = 0     --> no errors encountered                     //
//                  err = 1                                                   //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
unsigned int    err = 0;
long int        start_pos;
string          line, word;
stringstream    sline;

// Counters
int             n;

// ========================================================================== //
// CHECK STREAM STATUS                                                        //
// ========================================================================== //
if (!file_handle.good()) { return(1); }

// ========================================================================== //
// RESET INPUT DATA                                                           //
// ========================================================================== //
nV = 0;
nS = 0;
sV_data.resize(0);
sS_data.resize(0);
nV_data.resize(0);
nS_data.resize(0);

// ========================================================================== //
// RESET CURSOR POSITION TO FILE BEGIN                                        //
// ========================================================================== //
start_pos = file_handle.tellg();
file_handle.clear();
file_handle.seekg(0);

// ========================================================================== //
// SCAN DGF FILE                                                              //
// ========================================================================== //
word = "begin";
while (!file_handle.eof()) {

    // Get current line
    getline(file_handle, line);
    line = trim(line);
    sline.clear();
    sline.str(line);

    // Look for relevant keyword
    if (sline >> word) {
        if (word.compare("VERTEX") == 0) {

            // Get number of vertices
            err = Scan_DGF_data(file_handle, nV);
        }
        else if (word.compare("SIMPLEX") == 0) {

            // Get number of simplicies
            err = Scan_DGF_data(file_handle, nS);
        }
        else if (word.compare("VERTEXDATA") == 0) {
        
            // Get data set name
            if (sline >> word)  { sV_data.push_back(word);  }
            else                { sV_data.push_back("");    }

            // Get number of data in the dataset
            n = 0;
            err = Scan_DGF_data(file_handle, n);
            nV_data.push_back(n);
        }
        else if (word.compare("SIMPLEXDATA") == 0) {

            // Get data set name
            if (sline >> word)  { sS_data.push_back(word);  }
            else                { sS_data.push_back("");    }

            // Get number of data in the dataset
            n = 0;
            err = Scan_DGF_data(file_handle, n);
            nS_data.push_back(n);
        }
    }
} //next line

// ========================================================================== //
// RESET CURSOR POSITION                                                      //
// ========================================================================== //
file_handle.clear();
file_handle.seekg(start_pos);

return(err); }

// Checking routines ======================================================== //

// -------------------------------------------------------------------------- //
unsigned int Check_DGF_data(
    ifstream    &file_handle,
    int         &err_code
) {

// ========================================================================== //
// unsigned int Check_DGF_data(                                               //
//     ifstream    &file_handle,                                              //
//     int         &err_code)                                                 //
//                                                                            //
// Check errors in data set definition.                                       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - file_handle  : ifstream, input stream to dgf file.                       //
// - err_code     : int, error code:                                          //
//                  '0'  --> no errors found                                  //
//                  '1'  --> unterminated data block                          //
//                  '2'  --> unreadable data                                  //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - err       : unsigned int, error flag:                                    //
//               err = 0       --> no errors encountered                      //
//               err = 1       --> file is missing or not accessible          //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
unsigned int    err;
long int        current_pos;
string          line, word;
stringstream    sline;

// Counters
// none

// ========================================================================== //
// CHECK STREAM STATUS                                                        //
// ========================================================================== //
if (!file_handle.good()) { return(1); };

// ========================================================================== //
// RESET INPUT VARIABLES                                                      //
// ========================================================================== //
err_code = 0;

// ========================================================================== //
// CHECK DATA BLOCK                                                           //
// ========================================================================== //
word = "begin";
while (!file_handle.eof()
    && ((word.compare("#") != 0)
    &&  (word.compare("VERTEX") != 0)
    &&  (word.compare("SIMPLEX") != 0)
    &&  (word.compare("VERTEXDATA") != 0)
    &&  (word.compare("SIMPLEXDATA") != 0))) {

    // Get current line
    current_pos = file_handle.tellg();
    getline(file_handle, line);
    line = trim(line);
    sline.clear();
    sline.str(line);

    // Look for relevant keywords
    if (!(sline >> word)) {
        err_code = 2;
    }
} //next line
if (word.compare("#") != 0) {
    file_handle.clear();
    file_handle.seekg(current_pos);
    err_code = 1;
}

return(0); }

// -------------------------------------------------------------------------- //
unsigned int Check_DGF(
    ifstream    &file_handle,
    ivector2D   &err_code
) {

// ========================================================================== //
// unsigned int Check_DGF(                                                    //
//     ifstream    &file_handle,                                              //
//     ivector2D   &err_code)                                                 //
//                                                                            //
// Check dgf file.                                                            //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - file_handle   : ifstream, input stream to dgf file.                      //
// - err_code      : ivector2D, with error code associated to:                //
//                   vertex      --> err_code[0][0]                           //
//                   simplex     --> err_code[1][0]                           //
//                   vertexdata  --> err_code[2][i] (i-th vertex dataset)     //
//                   simplexdata --> err_code[3][i] (i-th simplex dataset)    //
//                   err_code can assume the following values:                //
//                   '1'         --> unterminated datablock                   //
//                   '2'         --> unreadable data                          //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - err           : unsigned int, error flag:                                //
//                   err = 0     --> no errors encountered                    //
//                   err = 1     --> file is missing or is not accessble      //
//                   err = 2     --> Unterminated file                        //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
unsigned int    err = 0;
long int        start_pos;
int             loc_err;
string          line, word;
stringstream    sline;

// Counters
int             i;

// ========================================================================== //
// CHECK INPUT STREAM                                                         //
// ========================================================================== //
if (!file_handle.good()) { return(1); }

// ========================================================================== //
// RESET INPUT VARIABLES                                                      //
// ========================================================================== //
err_code.resize(4);

// ========================================================================== //
// SET CURSOR POSITION AT FILE BEGIN                                          //
// ========================================================================== //
file_handle.clear();
start_pos = file_handle.tellg();
file_handle.seekg(0);

// ========================================================================== //
// SCAN DGF FILE                                                              //
// ========================================================================== //
word = "begin";
while ((!file_handle.eof()) && (word.compare("#") != 0)) {

    // Get current line
    getline(file_handle, line);
    line = trim(line);
    sline.clear();
    sline.str(line);

    // Look for keywords
    if (sline >> word) {
        if (word.compare("VERTEX") == 0) {
            err_code[0].resize(1);
            err = Check_DGF_data(file_handle, err_code[0][0]);
        }
        else if (word.compare("SIMPLEX") == 0) {
            err_code[1].resize(1);
            err = Check_DGF_data(file_handle, err_code[1][0]);
        }
        else if (word.compare("VERTEXDATA") == 0) {
            err = Check_DGF_data(file_handle, loc_err);
            err_code[2].push_back(loc_err);
        }
        else if (word.compare("SIMPLEXDATA") == 0) {
            err = Check_DGF_data(file_handle, loc_err);
            err_code[3].push_back(loc_err);
        }
    }
} //next line

// ========================================================================== //
// RESET CURSOR POSITION                                                      //
// ========================================================================== //
file_handle.clear();
file_handle.seekg(start_pos);

return(err); }

// Input functions ========================================================== //

// -------------------------------------------------------------------------- //
unsigned int Read_DGF_mesh(
    ifstream    &file_handle,
    int         &nV,
    int         &nS,
    dvector2D   &V,
    ivector2D   &S
) {

// ========================================================================== //
// unsigned int Read_DGF_mesh(                                                //
//     ifstream    &file_handle,                                              //
//     int         &nV,                                                       //
//     int         &nS,                                                       //
//     dvector2D   &V,                                                        //
//     ivector2D   &S)                                                        //
//                                                                            //
// Read mesh data from dgf file.                                              //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - file_handle : ifstream, input stream to dgf file                         //
// - nV          : int, number of mesh vertices                               //
// - nS          : int, number of simplicies                                  //
// - V           : dvector2D, vertex coordinate list. V[i][0], V[i][1], ...   //
//                 are the x, y, ... coordinates of the i-th vertex           //
// - S           : ivector2D, simplex-vertex connectivity S[i][0], S[i][1],   //
//                 ... are the global indices of vertices of the i-th simplex //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - err         : unsigned int, error flag:                                  //
//                 err = 0    --> no errors encountered                       //
//                 err = 1    --> file is missing or cannot be accessed       //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
unsigned int    err;
long int        start_pos;
string          line, word;
stringstream    sline;

// Counters
// none

// ========================================================================== //
// CHECK STREAM STATUS                                                        //
// ========================================================================== //
if (!file_handle.good()) { return(1); }

// ========================================================================== //
// SET CURSOR POSITION AT FILE BEGIN                                          //
// ========================================================================== //
file_handle.clear();
start_pos = file_handle.tellg();
file_handle.seekg(0);

// ========================================================================== //
// LOAD MESH DATA FROM FILE                                                   //
// ========================================================================== //
word = "begin";
while (!file_handle.eof()
    && (word.compare("#") != 0)) {

    // Get current line
    getline(file_handle, line);
    line = trim(line);
    sline.clear();
    sline.str(line);

    // Look for keywords
    if (sline >> word) {
        if (word.compare("VERTEX") == 0) {
            err = Read_DGF_data(file_handle, nV, V);
        }
        else if (word.compare("SIMPLEX") == 0) {
            err = Read_DGF_data(file_handle, nS, S);
        }
    }
} //next line

// ========================================================================== //
// RESET CURSOR POSITION                                                      //
// ========================================================================== //
file_handle.clear();
file_handle.seekg(start_pos);

return(err); };


// Output functions ========================================================= //

// -------------------------------------------------------------------------- //
unsigned int Write_DGF_mesh(
    ofstream    &file_handle,
    int         &nV,
    int         &nS,
    dvector2D   &V,
    ivector2D   &S
) {

// ========================================================================== //
// unsigned int Write_DGF_mesh(                                               //
//     ofstream    &file_handle,                                              //
//     int         &nV,                                                       //
//     int         &nS,                                                       //
//     dvector2D   &V,                                                        //
//     ivector2D   &S)                                                        //
//                                                                            //
// Export mesh data into dgf file.                                            //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - file_handle : ofstream, output stream to dgf file                        //
// - nV          : int, number of mesh vertices                               //
// - nS          : int, number of simplicies                                  //
// - V           : dvector2D, vertex coordinate list. V[i][0], V[i][1], ...   //
//                 are the x, y, ... coordinates of the i-th vertex           //
// - S           : ivector2D, simplex-vertex connectivity S[i][0], S[i][1],   //
//                 ... are the global indices of vertices of the i-th simplex //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - err         : unsigned int, error flag:                                  //
//                 err = 0    --> no errors encountered                       //
//                 err = 1    --> file is missing or cannot be accessed       //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
unsigned int            err = 0;

// Counters
// none

// ========================================================================== //
// CHECK STREAM STATUS                                                        //
// ========================================================================== //
if (!file_handle.good()) { return(1); }

// ========================================================================== //
// EXPORT MESH DATA                                                           //
// ========================================================================== //

// Vertex coordinate list
file_handle << "VERTEX" << endl;
err = Write_DGF_data(file_handle, nV, V);

// Simplex-vertex connectivity
file_handle << "SIMPLEX" << endl;
err = Write_DGF_data(file_handle, nS, S);

return(err); }


